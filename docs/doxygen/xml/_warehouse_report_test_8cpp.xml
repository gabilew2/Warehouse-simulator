<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="_warehouse_report_test_8cpp" kind="file" language="C++">
    <compoundname>WarehouseReportTest.cpp</compoundname>
    <includes local="no">gtest/gtest.h</includes>
    <includes refid="_warehouse_report_8h" local="yes">WarehouseReport/WarehouseReport.h</includes>
    <includes local="no">QDateTime</includes>
    <incdepgraph>
      <node id="4">
        <label>Report/Report.h</label>
        <link refid="_report_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>WarehouseReport/WarehouseReport.h</label>
        <link refid="_warehouse_report_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>test/WarehouseReport/WarehouseReportTest.cpp</label>
        <link refid="_warehouse_report_test_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>QDateTime</label>
      </node>
      <node id="6">
        <label>QList</label>
      </node>
      <node id="5">
        <label>QString</label>
      </node>
      <node id="2">
        <label>gtest/gtest.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="_warehouse_report_test_8cpp_1ae9a1d770b7e8098452a6dd98ecebeede" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(WarehouseReportTest, itLives)</argsstring>
        <name>TEST</name>
        <param>
          <type>WarehouseReportTest</type>
        </param>
        <param>
          <type>itLives</type>
        </param>
        <briefdescription>
<para>Test case to ensure that a <ref refid="class_warehouse_report" kindref="compound">WarehouseReport</ref> object can be instantiated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/WarehouseReport/WarehouseReportTest.cpp" line="13" column="1" bodyfile="test/WarehouseReport/WarehouseReportTest.cpp" bodystart="13" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="_warehouse_report_test_8cpp_1ad584aba0a9d9a5df24f198ee9db878d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(WarehouseReportTest, generateReportShouldReturnCorrectValue)</argsstring>
        <name>TEST</name>
        <param>
          <type>WarehouseReportTest</type>
        </param>
        <param>
          <type>generateReportShouldReturnCorrectValue</type>
        </param>
        <briefdescription>
<para>Test case to verify that the <ref refid="class_warehouse_report_1a3a4c6655eb2584b3d842d0138b6e6ac9" kindref="member">WarehouseReport::generateReport</ref> method returns the correct CSV format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/WarehouseReport/WarehouseReportTest.cpp" line="27" column="1" bodyfile="test/WarehouseReport/WarehouseReportTest.cpp" bodystart="27" bodyend="45"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Source file of tests for the <ref refid="class_warehouse_report" kindref="compound">WarehouseReport</ref> class. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_warehouse_report_8h" kindref="compound">WarehouseReport/WarehouseReport.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;QDateTime&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="_warehouse_report_test_8cpp_1ae9a1d770b7e8098452a6dd98ecebeede" refkind="member"><highlight class="normal"><ref refid="_warehouse_report_test_8cpp_1ae9a1d770b7e8098452a6dd98ecebeede" kindref="member">TEST</ref>(WarehouseReportTest,<sp/>itLives)</highlight></codeline>
<codeline lineno="14"><highlight class="normal">{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>warehouseId<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>capacity<sp/>=<sp/>1000.0;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>QList&lt;Report::ProductReport&gt;<sp/>productList;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>operationalCosts<sp/>=<sp/>2000.0;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>netProfit<sp/>=<sp/>5000.0;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_warehouse_report" kindref="compound">WarehouseReport</ref><sp/>report(warehouseId,<sp/>capacity,<sp/>productList,<sp/>operationalCosts,<sp/>netProfit);</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="_warehouse_report_test_8cpp_1ad584aba0a9d9a5df24f198ee9db878d6" refkind="member"><highlight class="normal"><ref refid="_warehouse_report_test_8cpp_1ae9a1d770b7e8098452a6dd98ecebeede" kindref="member">TEST</ref>(WarehouseReportTest,<sp/>generateReportShouldReturnCorrectValue)</highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>warehouseId<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>capacity<sp/>=<sp/>1000.0;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>QList&lt;Report::ProductReport&gt;<sp/>productList<sp/>=</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Product1&quot;</highlight><highlight class="normal">,<sp/>10.0,<sp/>5},</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;Product2&quot;</highlight><highlight class="normal">,<sp/>20.0,<sp/>3}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>operationalCosts<sp/>=<sp/>2000.0;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>netProfit<sp/>=<sp/>5000.0;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_warehouse_report" kindref="compound">WarehouseReport</ref><sp/>report(warehouseId,<sp/>capacity,<sp/>productList,<sp/>operationalCosts,<sp/>netProfit);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>QString<sp/>generatedCSV<sp/>=<sp/>report.<ref refid="class_warehouse_report_1a3a4c6655eb2584b3d842d0138b6e6ac9" kindref="member">generateReport</ref>();</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>QString<sp/>expectedCSVStart<sp/>=<sp/>QString(</highlight><highlight class="stringliteral">&quot;Warehouse<sp/>ID,Capacity\n%1,%2\nProduct<sp/>Name,Price,Quantity\n&quot;</highlight><highlight class="normal">).arg(warehouseId).arg(capacity);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_TRUE(generatedCSV.startsWith(expectedCSVStart));</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="test/WarehouseReport/WarehouseReportTest.cpp"/>
  </compounddef>
</doxygen>
