{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\info 
{\title {\comment Warehouse Simulator  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
1.0.0 \par
}}Warehouse Simulator}
{\comment Generated by doxygen 1.10.0.}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt Warehouse Simulator}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Version 1.0.0\par\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Table of Contents\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\par \pard\plain 
\par \pard\plain 
\pard\plain \s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Warehouse-simulator\par \pard\plain 
{\tc\tcl1 \v Warehouse-simulator}
{\xe \v Warehouse-simulator}
{\bkmkstart AAAAAAAAER}
{\bkmkend AAAAAAAAER}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\bkmkstart AAAAAAAAES}
{\bkmkend AAAAAAAAES}
 Projekt Symulacja Domu Towarowego to system wspomagaj\'C4\'85cy zarz\'C4\'85dzanie magazynem, kt\'C3\'B3ry umo\'C5\'BCliwia symulowanie i optymalizowanie proces\'C3\'B3w magazynowych. Dzi\'C4\'99ki niemu u\'C5\'BCytkownicy mog\'C4\'85 modelowa\'C4\'87 r\'C3\'B3\'C5\'BCne scenariusze, analizowa\'C4\'87 wyniki oraz podejmowa\'C4\'87 decyzje w czasie rzeczywistym. Projekt integruje algorytmy symulacyjne z interaktywnym interfejsem u\'C5\'BCytkownika, co pozwala na dynamiczne monitorowanie stanu magazynu oraz szybk\'C4\'85 reakcj\'C4\'99 na zmiany w otoczeniu biznesowym.\par
G\'C5\'82\'C3\'B3wne cechy projektu obejmuj\'C4\'85 definiowanie magazyn\'C3\'B3w, produkt\'C3\'B3w, atrybut\'C3\'B3w, symulacj\'C4\'99 dzia\'C5\'82ania magazynu w p\'C4\'99tli czasowej, generowanie zdarze\'C5\'84, interwencj\'C4\'99 u\'C5\'BCytkownika oraz generowanie raport\'C3\'B3w z wynikami symulacji. Celem projektu jest dostarczenie narz\'C4\'99dzia wspomagaj\'C4\'85cego efektywne zarz\'C4\'85dzanie magazynem, kt\'C3\'B3re pozwoli firmom na zwi\'C4\'99kszenie efektywno\'C5\'9Bci operacyjnej i maksymalizacj\'C4\'99 zysk\'C3\'B3w. \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Namespace Index\par \pard\plain 
{\tc \v Namespace Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Namespace List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all namespaces with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b Ui} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Hierarchical Index\par \pard\plain 
{\tc \v Hierarchical Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Class Hierarchy\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This inheritance list is sorted roughly, but not completely, alphabetically:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
Event\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAET \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Product\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Report::ProductReport\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
QMainWindow
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
GUI\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
QThread
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
SimulationThread\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
Report\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFN \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
SalesReport\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
WarehouseReport\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
Simulation\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Storage\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGL \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
Warehouse\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Index\par \pard\plain 
{\tc \v Class Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Class List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here are the classes, structs, unions and interfaces with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b Event} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\b Event} in the warehouse simulation })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAET \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b GUI} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Inherits from QMainWindow and represents the main window of the application })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Product} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\b Product} with a name, price, and quantity })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Report::ProductReport} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Represents a report for a single product })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Report} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Represents a report in the store simulation })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b SalesReport} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Extends the {\b Report} class to provide a report specifically for sales })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Simulation} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Manages the overall department store simulation })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b SimulationThread} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Responsible for running the simulation in a separate thread })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Storage} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\b Storage} unit with a certain capacity })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Warehouse} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\b Warehouse} with storage capacity })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b WarehouseReport} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Extends the {\b Report} class to provide a report specifically for warehouse inventory })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Index\par \pard\plain 
{\tc \v File Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
File List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all files with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b src/{\b main.cpp} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Main entry point for the {\b Warehouse} Simulator application })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/Event/{\b Event.cpp} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file of the {\b Event} class })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/Event/{\b Event.h} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Header file of the {\b Event} class })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/gui/{\b gui.cpp} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file for the {\b GUI} class })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/gui/{\b gui.h} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Header file for the {\b GUI} class })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/Product/{\b Product.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/Product/{\b Product.h} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Header file for the {\b Product} class })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/Report/{\b Report.cpp} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file for the {\b Report} class })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/Report/{\b Report.h} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Header file for the {\b Report} class })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/SalesReport/{\b SalesReport.cpp} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file for the {\b SalesReport} class })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/SalesReport/{\b SalesReport.h} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Header file for the {\b SalesReport} class })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/Simulation/{\b Simulation.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/Simulation/{\b Simulation.h} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Header file for the {\b Simulation} class })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/Storage/{\b Storage.cpp} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file of the {\b Storage} class })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/Storage/{\b Storage.h} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Header file of the {\b Storage} class })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/Warehouse/{\b Warehouse.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/Warehouse/{\b Warehouse.h} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file of the {\b Warehouse} class })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/WarehouseReport/{\b WarehouseReport.cpp} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file of the {\b WarehouseReport} class })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/WarehouseReport/{\b WarehouseReport.h} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Header file of the {\b WarehouseReport} class })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b test/{\b main.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b test/Event/{\b EventTest.cpp} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file of tests for the {\b Event} class })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b test/Product/{\b ProductTest.cpp} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file of tests for the {\b Product} class })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b test/Report/{\b ReportTest.cpp} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file of tests for the {\b Report} class })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b test/SalesReport/{\b SalesReportTest.cpp} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file of tests for the {\b SalesReport} class })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b test/Simulation/{\b SimulationTest.cpp} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file of tests for the {\b Simulation} class })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b test/Storage/{\b StorageTest.cpp} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file of tests for the {\b Storage} class })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b test/Warehouse/{\b WarehouseTest.cpp} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file of tests for the {\b Warehouse} class })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b test/WarehouseReport/{\b WarehouseReportTest.cpp} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file of tests for the {\b WarehouseReport} class })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Namespace Documentation\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Ui Namespace Reference\par \pard\plain 
{\tc\tcl2 \v Ui}
{\xe \v Ui}
{\bkmkstart AAAAAAAAHH}
{\bkmkend AAAAAAAAHH}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Documentation{\tc \v Class Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Event Class Reference\par \pard\plain 
{\tc\tcl2 \v Event}
{\xe \v Event}
{\bkmkstart AAAAAAAAET}
{\bkmkend AAAAAAAAET}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The {\b Event} class represents an event in the warehouse simulation. }}\par
{
{\f2 #include <Event.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Event} (QString eventType, QDateTime time)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constructor for the {\b Event} class. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QString {\b getEventType} () const\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Retrieves the type of the event. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QDateTime {\b getTime} () const\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Retrieves the timestamp of the event. }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static {\b Event} {\b generateEvent} (QString eventType, int seed)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Generates a random event based on the given seed. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The {\b Event} class represents an event in the warehouse simulation. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class encapsulates the details of an event, including its type and the time it occurred. \par
}{
Definition at line {\b 17} of file {\b Event.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v Event\:Event}
{\xe \v Event\:Event}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Event::Event (QString  {\i eventType}, QDateTime  {\i time})}}
\par
{\bkmkstart AAAAAAAAEU}
{\bkmkend AAAAAAAAEU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constructor for the {\b Event} class. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a new {\b Event} object.\par
Initializes a new instance of the {\b Event} class with the specified type and time. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i eventType} \cell }{The type of the event. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i time} \cell }{The timestamp when the event occurred. \cell }
{\row }
}
}{
Definition at line {\b 12} of file {\b Event.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v generateEvent\:Event}
{\xe \v Event\:generateEvent}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Event} Event::generateEvent (QString  {\i eventType}, int  {\i seed}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAEV}
{\bkmkend AAAAAAAAEV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Generates a random event based on the given seed. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Generates an event with a random time offset.\par
This static method creates a new event with a random time offset based on the provided seed. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i eventType} \cell }{The type of the event to generate. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i seed} \cell }{The seed for the random number generator. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
A new {\b Event} instance with the specified type and a random time.\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i eventType} \cell }{The type of the event to generate. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i seed} \cell }{The seed for the random number generator. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
A new {\b Event} instance with the specified type and a random time. \par
}}}{
Definition at line {\b 25} of file {\b Event.cpp}.}\par
}
{\xe \v getEventType\:Event}
{\xe \v Event\:getEventType}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QString Event::getEventType () const}}
\par
{\bkmkstart AAAAAAAAEW}
{\bkmkend AAAAAAAAEW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Retrieves the type of the event. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The event type as a QString. \par
}}}{
Definition at line {\b 38} of file {\b Event.cpp}.}\par
}
{\xe \v getTime\:Event}
{\xe \v Event\:getTime}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QDateTime Event::getTime () const}}
\par
{\bkmkstart AAAAAAAAEX}
{\bkmkend AAAAAAAAEX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Retrieves the timestamp of the event. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The event time as a QDateTime. \par
}}}{
Definition at line {\b 48} of file {\b Event.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/Event/{\b Event.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/Event/{\b Event.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
GUI Class Reference\par \pard\plain 
{\tc\tcl2 \v GUI}
{\xe \v GUI}
{\bkmkstart AAAAAAAAEY}
{\bkmkend AAAAAAAAEY}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The {\b GUI} class inherits from QMainWindow and represents the main window of the application. }}\par
{
{\f2 #include <gui.h>}}\par
Inheritance diagram for GUI:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_g_u_i.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b GUI} ({\b GUIElement} *parent=nullptr)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constructor for the {\b GUI} class. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~GUI} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Destructor for the {\b GUI} class. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b render} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Renders the graphical user interface elements. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b updateGUI} ({\b GUIEvent} &event)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Updates the {\b GUI} based on the given event. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b handleEvents} ({\b GUIEvent} &event)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Handles user-generated events. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The {\b GUI} class inherits from QMainWindow and represents the main window of the application. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class manages the user interface for the application. It sets up the main window and its associated widgets, and handles user interactions. \par
}{
Definition at line {\b 82} of file {\b gui.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v GUI\:GUI}
{\xe \v GUI\:GUI}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GUI::GUI ({\b GUIElement} *  {\i parent} = {\f2 nullptr}){\f2 [explicit]}}}
\par
{\bkmkstart AAAAAAAAEZ}
{\bkmkend AAAAAAAAEZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constructor for the {\b GUI} class. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i parent} \cell }{Pointer to the parent widget, if any. \cell }
{\row }
}
}{
Definition at line {\b 14} of file {\b gui.cpp}.}\par
}
{\xe \v ~GUI\:GUI}
{\xe \v GUI\:~GUI}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
GUI::~GUI ()}}
\par
{\bkmkstart AAAAAAAAFA}
{\bkmkend AAAAAAAAFA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Destructor for the {\b GUI} class. }}\par
{
Definition at line {\b 25} of file {\b gui.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v handleEvents\:GUI}
{\xe \v GUI\:handleEvents}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void GUI::handleEvents ({\b GUIEvent} &  {\i event})}}
\par
{\bkmkstart AAAAAAAAFB}
{\bkmkend AAAAAAAAFB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Handles user-generated events. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function processes user interactions (e.g., mouse clicks, keyboard input) and responds appropriately. It takes a GUIEvent as a parameter and performs actions based on the event type. For instance, it may execute a specific action when a button is clicked or update the {\b GUI} state when a key is pressed.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i event} \cell }{The {\b GUI} event to handle. \cell }
{\row }
}
}}
{\xe \v render\:GUI}
{\xe \v GUI\:render}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void GUI::render ()}}
\par
{\bkmkstart AAAAAAAAFC}
{\bkmkend AAAAAAAAFC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Renders the graphical user interface elements. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function is responsible for rendering the {\b GUI} elements on the screen. It ensures that all widgets (buttons, labels, etc.) are displayed correctly based on their current state and properties. \par
}{
Definition at line {\b 33} of file {\b gui.cpp}.}\par
}
{\xe \v updateGUI\:GUI}
{\xe \v GUI\:updateGUI}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void GUI::updateGUI ({\b GUIEvent} &  {\i event})}}
\par
{\bkmkstart AAAAAAAAFD}
{\bkmkend AAAAAAAAFD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Updates the {\b GUI} based on the given event. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function handles {\b GUI} updates triggered by specific events. It takes a GUIEvent as a parameter and modifies the {\b GUI} state or individual elements accordingly. For example, it may update the text of a label or enable/disable a button based on the event.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i event} \cell }{The {\b GUI} event that triggers the update. \cell }
{\row }
}
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/gui/{\b gui.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/gui/{\b gui.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Product Class Reference\par \pard\plain 
{\tc\tcl2 \v Product}
{\xe \v Product}
{\bkmkstart AAAAAAAAFE}
{\bkmkend AAAAAAAAFE}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The {\b Product} class represents a product with a name, price, and quantity. }}\par
{
{\f2 #include <Product.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Product} (int {\b productId}, QString name, double price, int quantity)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a new {\b Product} object. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b status} {\b sell} (int quantityToSell)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sell a quantity of the product. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b status} {\b updatePrice} (double newPrice)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Update the price of the product. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b status} {\b changeQuantity} (int quantity)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Change the quantity of the product. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QString {\b getName} () const\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the name of the product. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b getPrice} () const\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the price of the product. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getQuantity} () const\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the quantity of the product. }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b productId}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
ID of the product. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The {\b Product} class represents a product with a name, price, and quantity. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class provides methods to sell the product, update its price, and change its quantity. \par
}{
Definition at line {\b 20} of file {\b Product.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v Product\:Product}
{\xe \v Product\:Product}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Product::Product (int  {\i productId}, QString  {\i name}, double  {\i price}, int  {\i quantity})}}
\par
{\bkmkstart AAAAAAAAFF}
{\bkmkend AAAAAAAAFF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a new {\b Product} object. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i productId} \cell }{ID of the product. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i name} \cell }{Name of the product. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i price} \cell }{Price of the product. If negative, it will be set to 0. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quantity} \cell }{Quantity of the product. If negative, it will be set to 0. \cell }
{\row }
}
}{
Definition at line {\b 6} of file {\b Product.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v changeQuantity\:Product}
{\xe \v Product\:changeQuantity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b status} Product::changeQuantity (int  {\i quantity})}}
\par
{\bkmkstart AAAAAAAAFG}
{\bkmkend AAAAAAAAFG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Change the quantity of the product. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quantity} \cell }{The new quantity of the product. Must be non-negative. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
status SUCCESS if the operation is successful, ERROR otherwise. \par
}}}{
Definition at line {\b 71} of file {\b Product.cpp}.}\par
}
{\xe \v getName\:Product}
{\xe \v Product\:getName}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QString Product::getName () const}}
\par
{\bkmkstart AAAAAAAAFH}
{\bkmkend AAAAAAAAFH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the name of the product. }}\par
{
Definition at line {\b 86} of file {\b Product.cpp}.}\par
}
{\xe \v getPrice\:Product}
{\xe \v Product\:getPrice}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double Product::getPrice () const}}
\par
{\bkmkstart AAAAAAAAFI}
{\bkmkend AAAAAAAAFI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the price of the product. }}\par
{
Definition at line {\b 91} of file {\b Product.cpp}.}\par
}
{\xe \v getQuantity\:Product}
{\xe \v Product\:getQuantity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Product::getQuantity () const}}
\par
{\bkmkstart AAAAAAAAFJ}
{\bkmkend AAAAAAAAFJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the quantity of the product. }}\par
{
Definition at line {\b 96} of file {\b Product.cpp}.}\par
}
{\xe \v sell\:Product}
{\xe \v Product\:sell}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b status} Product::sell (int  {\i quantityToSell})}}
\par
{\bkmkstart AAAAAAAAFK}
{\bkmkend AAAAAAAAFK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sell a quantity of the product. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quantityToSell} \cell }{The quantity of the product to sell. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
status SUCCESS if the operation is successful, ERROR otherwise. \par
}}}{
Definition at line {\b 34} of file {\b Product.cpp}.}\par
}
{\xe \v updatePrice\:Product}
{\xe \v Product\:updatePrice}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b status} Product::updatePrice (double  {\i newPrice})}}
\par
{\bkmkstart AAAAAAAAFL}
{\bkmkend AAAAAAAAFL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Update the price of the product. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i newPrice} \cell }{The new price of the product. Must be positive. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
status SUCCESS if the operation is successful, ERROR otherwise. \par
}}}{
Definition at line {\b 55} of file {\b Product.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v productId\:Product}
{\xe \v Product\:productId}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Product::productId}}
\par
{\bkmkstart AAAAAAAAFM}
{\bkmkend AAAAAAAAFM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
ID of the product. }}\par
{
Definition at line {\b 27} of file {\b Product.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/Product/{\b Product.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/Product/{\b Product.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Report::ProductReport Struct Reference\par \pard\plain 
{\tc\tcl2 \v Report::ProductReport}
{\xe \v Report::ProductReport}
{\bkmkstart AAAAAAAAFU}
{\bkmkend AAAAAAAAFU}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Represents a report for a single product. }}\par
{
{\f2 #include <Report.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QString} {\b name}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Name of the product. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b double} {\b price}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Price of the product. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b quantity}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Quantity of the product. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Represents a report for a single product. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This structure holds the details of a product for reporting purposes, including its name, price, and quantity. \par
}{
Definition at line {\b 31} of file {\b Report.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v name\:Report::ProductReport}
{\xe \v Report::ProductReport\:name}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b QString} Report::ProductReport::name}}
\par
{\bkmkstart AAAAAAAAFV}
{\bkmkend AAAAAAAAFV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Name of the product. }}\par
{
Definition at line {\b 33} of file {\b Report.h}.}\par
}
{\xe \v price\:Report::ProductReport}
{\xe \v Report::ProductReport\:price}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b double} Report::ProductReport::price}}
\par
{\bkmkstart AAAAAAAAFW}
{\bkmkend AAAAAAAAFW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Price of the product. }}\par
{
Definition at line {\b 34} of file {\b Report.h}.}\par
}
{\xe \v quantity\:Report::ProductReport}
{\xe \v Report::ProductReport\:quantity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Report::ProductReport::quantity}}
\par
{\bkmkstart AAAAAAAAFX}
{\bkmkend AAAAAAAAFX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Quantity of the product. }}\par
{
Definition at line {\b 35} of file {\b Report.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/Report/{\b Report.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Report Class Reference\par \pard\plain 
{\tc\tcl2 \v Report}
{\xe \v Report}
{\bkmkstart AAAAAAAAFN}
{\bkmkend AAAAAAAAFN}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Represents a report in the store simulation. }}\par
{
{\f2 #include <Report.h>}}\par
Inheritance diagram for Report:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_report.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b ProductReport}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Represents a report for a single product. }}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Report} (double operationalCosts, double netProfit)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a new {\b Report} object. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QString {\b generateReport} () const\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Generates a summary report as a QString. }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\b setOperationalCosts} (double costs)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Set the operational costs. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\b setNetProfit} (double profit)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Set the net profit. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static double {\b getOperationalCosts} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the operational costs. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static double {\b getNetProfit} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the net profit. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Represents a report in the store simulation. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class is responsible for generating reports that summarize the operational costs and net profits. \par
}{
Definition at line {\b 17} of file {\b Report.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v Report\:Report}
{\xe \v Report\:Report}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Report::Report (double  {\i operationalCosts}, double  {\i netProfit})}}
\par
{\bkmkstart AAAAAAAAFO}
{\bkmkend AAAAAAAAFO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a new {\b Report} object. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i operationalCosts} \cell }{Operational costs of the store. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i netProfit} \cell }{Net profit of the store. \cell }
{\row }
}
}{
Definition at line {\b 17} of file {\b Report.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v generateReport\:Report}
{\xe \v Report\:generateReport}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QString Report::generateReport () const}}
\par
{\bkmkstart AAAAAAAAFP}
{\bkmkend AAAAAAAAFP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Generates a summary report as a QString. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This method compiles the operational costs and net profits into a readable format. \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
QString A summary report of the store's financial status.\par
QString A summary report of the store's financial status. \par
}}}{
Definition at line {\b 28} of file {\b Report.cpp}.}\par
}
{\xe \v getNetProfit\:Report}
{\xe \v Report\:getNetProfit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double Report::getNetProfit (){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAFQ}
{\bkmkend AAAAAAAAFQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the net profit. }}\par
{
Definition at line {\b 52} of file {\b Report.cpp}.}\par
}
{\xe \v getOperationalCosts\:Report}
{\xe \v Report\:getOperationalCosts}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double Report::getOperationalCosts (){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAFR}
{\bkmkend AAAAAAAAFR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the operational costs. }}\par
{
Definition at line {\b 47} of file {\b Report.cpp}.}\par
}
{\xe \v setNetProfit\:Report}
{\xe \v Report\:setNetProfit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Report::setNetProfit (double  {\i profit}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAFS}
{\bkmkend AAAAAAAAFS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Set the net profit. }}\par
{
Definition at line {\b 41} of file {\b Report.cpp}.}\par
}
{\xe \v setOperationalCosts\:Report}
{\xe \v Report\:setOperationalCosts}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Report::setOperationalCosts (double  {\i costs}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAFT}
{\bkmkend AAAAAAAAFT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Set the operational costs. }}\par
{
Definition at line {\b 36} of file {\b Report.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/Report/{\b Report.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/Report/{\b Report.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SalesReport Class Reference\par \pard\plain 
{\tc\tcl2 \v SalesReport}
{\xe \v SalesReport}
{\bkmkstart AAAAAAAAFY}
{\bkmkend AAAAAAAAFY}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The {\b SalesReport} class extends the {\b Report} class to provide a report specifically for sales. }}\par
{
{\f2 #include <SalesReport.h>}}\par
Inheritance diagram for SalesReport:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_sales_report.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b SalesReport} (int salesId, QDateTime time, QList< {\b ProductReport} > productList, double operationalCosts, double netProfit)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a new {\b SalesReport} object. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QString {\b generateReport} () const\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Generates a detailed sales report. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The {\b SalesReport} class extends the {\b Report} class to provide a report specifically for sales. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class inherits from {\b Report} and is responsible for generating a sales report, which includes details such as sales ID, time, and a list of products sold. \par
}{
Definition at line {\b 20} of file {\b SalesReport.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v SalesReport\:SalesReport}
{\xe \v SalesReport\:SalesReport}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
SalesReport::SalesReport (int  {\i salesId}, QDateTime  {\i time}, QList< {\b ProductReport} >  {\i productList}, double  {\i operationalCosts}, double  {\i netProfit})}}
\par
{\bkmkstart AAAAAAAAFZ}
{\bkmkend AAAAAAAAFZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a new {\b SalesReport} object. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i salesId} \cell }{Unique identifier for the sales report. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i time} \cell }{The time when the report is generated. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i productList} \cell }{List of products included in the sales report. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i operationalCosts} \cell }{Operational costs of the store. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i netProfit} \cell }{Net profit of the store. \cell }
{\row }
}
}{
Definition at line {\b 11} of file {\b SalesReport.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v generateReport\:SalesReport}
{\xe \v SalesReport\:generateReport}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QString SalesReport::generateReport () const}}
\par
{\bkmkstart AAAAAAAAGA}
{\bkmkend AAAAAAAAGA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Generates a detailed sales report. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
QString A formatted string representing the sales report. \par
}}}{
Definition at line {\b 21} of file {\b SalesReport.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/SalesReport/{\b SalesReport.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/SalesReport/{\b SalesReport.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Simulation Class Reference\par \pard\plain 
{\tc\tcl2 \v Simulation}
{\xe \v Simulation}
{\bkmkstart AAAAAAAAGB}
{\bkmkend AAAAAAAAGB}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The {\b Simulation} class manages the overall department store simulation. }}\par
{
{\f2 #include <Simulation.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Simulation} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a new {\b Simulation} object. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b status} {\b conductCycle} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Conducts a simulation cycle, processing events for the current cycle. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b status} {\b respondToEvent} ({\b Event} &event)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Responds to a specific event. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b run} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initiates the simulation by running the main loop. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b processEvents} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Processes all scheduled events. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QString {\b generateReport} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Generates a report summarizing simulation results. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The {\b Simulation} class manages the overall department store simulation. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class orchestrates the simulation process, including event handling, warehouse management, product operations, and reporting. \par
}{
Definition at line {\b 28} of file {\b Simulation.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v Simulation\:Simulation}
{\xe \v Simulation\:Simulation}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Simulation::Simulation ()}}
\par
{\bkmkstart AAAAAAAAGC}
{\bkmkend AAAAAAAAGC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a new {\b Simulation} object. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets up the initial state of the simulation, including loading settings and preparing the environment. \par
}{
Definition at line {\b 6} of file {\b Simulation.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v conductCycle\:Simulation}
{\xe \v Simulation\:conductCycle}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b status} Simulation::conductCycle ()}}
\par
{\bkmkstart AAAAAAAAGD}
{\bkmkend AAAAAAAAGD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Conducts a simulation cycle, processing events for the current cycle. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Processes events and updates the simulation state for each cycle. \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Status of the cycle (success or failure). \par
}}}{
Definition at line {\b 170} of file {\b Simulation.cpp}.}\par
}
{\xe \v generateReport\:Simulation}
{\xe \v Simulation\:generateReport}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QString Simulation::generateReport ()}}
\par
{\bkmkstart AAAAAAAAGE}
{\bkmkend AAAAAAAAGE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Generates a report summarizing simulation results. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compiles data from the simulation into a formatted report string. \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
QString A summary report of the simulation results. \par
}}}{
Definition at line {\b 298} of file {\b Simulation.cpp}.}\par
}
{\xe \v processEvents\:Simulation}
{\xe \v Simulation\:processEvents}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Simulation::processEvents ()}}
\par
{\bkmkstart AAAAAAAAGF}
{\bkmkend AAAAAAAAGF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Processes all scheduled events. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Invokes conductCycle to process events for the current cycle. \par
}{
Definition at line {\b 159} of file {\b Simulation.cpp}.}\par
}
{\xe \v respondToEvent\:Simulation}
{\xe \v Simulation\:respondToEvent}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b status} Simulation::respondToEvent ({\b Event} &  {\i event})}}
\par
{\bkmkstart AAAAAAAAGG}
{\bkmkend AAAAAAAAGG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Responds to a specific event. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Handles the given event based on its type and updates the simulation state accordingly. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i event} \cell }{The event to handle. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Status of event handling (success or failure). \par
}}}{
Definition at line {\b 198} of file {\b Simulation.cpp}.}\par
}
{\xe \v run\:Simulation}
{\xe \v Simulation\:run}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Simulation::run ()}}
\par
{\bkmkstart AAAAAAAAGH}
{\bkmkend AAAAAAAAGH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Initiates the simulation by running the main loop. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Starts the simulation loop, generating cycles, processing events, and generating reports. \par
}{
Definition at line {\b 105} of file {\b Simulation.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/Simulation/{\b Simulation.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/Simulation/{\b Simulation.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SimulationThread Class Reference\par \pard\plain 
{\tc\tcl2 \v SimulationThread}
{\xe \v SimulationThread}
{\bkmkstart AAAAAAAAGI}
{\bkmkend AAAAAAAAGI}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The {\b SimulationThread} class is responsible for running the simulation in a separate thread. }}\par
{
{\f2 #include <gui.h>}}\par
Inheritance diagram for SimulationThread:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_simulation_thread.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Signals\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b simulationFinished} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Signal emitted when the simulation has finished running. }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b run} () override\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Executes the simulation in a separate thread. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The {\b SimulationThread} class is responsible for running the simulation in a separate thread. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class inherits from QThread and overrides the run method to execute the simulation. It emits a signal upon completion of the simulation to notify other components of its completion. \par
}{
Definition at line {\b 47} of file {\b gui.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v run\:SimulationThread}
{\xe \v SimulationThread\:run}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void SimulationThread::run (){\f2 [inline]}, {\f2 [override]}}}
\par
{\bkmkstart AAAAAAAAGJ}
{\bkmkend AAAAAAAAGJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Executes the simulation in a separate thread. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function overrides the run method from QThread and is called when the thread starts. It initializes a {\b Simulation} object and runs the simulation. Upon completion, it emits the simulationFinished signal. \par
}{
Definition at line {\b 58} of file {\b gui.h}.}\par
}
{\xe \v simulationFinished\:SimulationThread}
{\xe \v SimulationThread\:simulationFinished}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void SimulationThread::simulationFinished (){\f2 [signal]}}}
\par
{\bkmkstart AAAAAAAAGK}
{\bkmkend AAAAAAAAGK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Signal emitted when the simulation has finished running. }}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/gui/{\b gui.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Storage Class Reference\par \pard\plain 
{\tc\tcl2 \v Storage}
{\xe \v Storage}
{\bkmkstart AAAAAAAAGL}
{\bkmkend AAAAAAAAGL}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The {\b Storage} class represents a storage unit with a certain capacity. }}\par
{
{\f2 #include <Storage.h>}}\par
Inheritance diagram for Storage:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_storage.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Storage} (int {\b capacity})\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a new {\b Storage} object with a specified capacity. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b storageStatus} {\b checkCapacity} (int totalCapacity) const\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Check the current capacity status of the storage. }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b capacity}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\b Storage} fill level. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The {\b Storage} class represents a storage unit with a certain capacity. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class provides a method to check the current status of the storage based on its capacity. \par
}{
Definition at line {\b 19} of file {\b Storage.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v Storage\:Storage}
{\xe \v Storage\:Storage}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Storage::Storage (int  {\i capacity})}}
\par
{\bkmkstart AAAAAAAAGM}
{\bkmkend AAAAAAAAGM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a new {\b Storage} object with a specified capacity. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i capacity} \cell }{The initial capacity of the storage. \cell }
{\row }
}
}{
Definition at line {\b 11} of file {\b Storage.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v checkCapacity\:Storage}
{\xe \v Storage\:checkCapacity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b storageStatus} Storage::checkCapacity (int  {\i totalCapacity}) const}}
\par
{\bkmkstart AAAAAAAAGN}
{\bkmkend AAAAAAAAGN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Check the current capacity status of the storage. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i totalCapacity} \cell }{The maximum capacity of the storage. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
storageStatus The status of the storage: EMPTY, AVAILABLE, or FULLY. \par
}}}{
Definition at line {\b 19} of file {\b Storage.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v capacity\:Storage}
{\xe \v Storage\:capacity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Storage::capacity{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAGO}
{\bkmkend AAAAAAAAGO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\b Storage} fill level. }}\par
{
Definition at line {\b 22} of file {\b Storage.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/Storage/{\b Storage.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/Storage/{\b Storage.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Warehouse Class Reference\par \pard\plain 
{\tc\tcl2 \v Warehouse}
{\xe \v Warehouse}
{\bkmkstart AAAAAAAAGP}
{\bkmkend AAAAAAAAGP}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The {\b Warehouse} class represents a warehouse with storage capacity. }}\par
{
{\f2 #include <Warehouse.h>}}\par
Inheritance diagram for Warehouse:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_warehouse.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Warehouse} (QString location, double warehouseCapacity)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a new {\b Warehouse} object. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b storageStatus} {\b checkStatus} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Check the current status of the warehouse and updates the capacity attribute inherited from the {\b Storage} class. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b status} {\b updateStatus} (int newCapacity)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Update the storage capacity of the warehouse. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b status} {\b addProduct} (QString name, double price, int quantity, int {\b productId})\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Add a new product to the warehouse. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b status} {\b updatePrice} (double newPrice, int {\b productId})\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Update the price of a product in the warehouse. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b status} {\b changeQuantity} (int quantity, int {\b productId})\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Change the quantity of a product in the warehouse. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b status} {\b sell} (int quantityToSell, int {\b productId})\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sell a quantity of a product from the warehouse. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QString {\b getName} (int {\b productId})\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the name of a product by its ID. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b getPrice} (int {\b productId})\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the price of a product by its ID. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getQuantity} (int {\b productId})\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the quantity of a product by its ID. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QString {\b getLocation} () const\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the location of the warehouse. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QList< {\b Product} > {\b getProductList} () const\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the list of the products. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b getCurrentCapacity} () const\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the capacity of the warehouse. }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static int {\b warehouseId} = 0\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Unique identifier for the warehouse. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The {\b Warehouse} class represents a warehouse with storage capacity. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class inherits from {\b Storage} and provides additional functionality specific to warehouse operations. \par
}{
Definition at line {\b 20} of file {\b Warehouse.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v Warehouse\:Warehouse}
{\xe \v Warehouse\:Warehouse}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Warehouse::Warehouse (QString  {\i location}, double  {\i warehouseCapacity})}}
\par
{\bkmkstart AAAAAAAAGQ}
{\bkmkend AAAAAAAAGQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a new {\b Warehouse} object. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i location} \cell }{The location of the warehouse. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i warehouseCapacity} \cell }{The initial capacity of the warehouse. \cell }
{\row }
}
}{
Definition at line {\b 14} of file {\b Warehouse.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v addProduct\:Warehouse}
{\xe \v Warehouse\:addProduct}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b status} Warehouse::addProduct (QString  {\i name}, double  {\i price}, int  {\i quantity}, int  {\i productId})}}
\par
{\bkmkstart AAAAAAAAGR}
{\bkmkend AAAAAAAAGR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Add a new product to the warehouse. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i name} \cell }{The name of the product. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i price} \cell }{The price of the product. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quantity} \cell }{The quantity of the product. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i productId} \cell }{ID of the product. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
status SUCCESS if the product is added, ERROR otherwise. \par
}}}{
Definition at line {\b 84} of file {\b Warehouse.cpp}.}\par
}
{\xe \v changeQuantity\:Warehouse}
{\xe \v Warehouse\:changeQuantity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b status} Warehouse::changeQuantity (int  {\i quantity}, int  {\i productId})}}
\par
{\bkmkstart AAAAAAAAGS}
{\bkmkend AAAAAAAAGS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Change the quantity of a product in the warehouse. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quantity} \cell }{The new quantity of the product. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i productId} \cell }{The ID of the product. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
status SUCCESS if the quantity is updated, ERROR otherwise. \par
}}}{
Definition at line {\b 133} of file {\b Warehouse.cpp}.}\par
}
{\xe \v checkStatus\:Warehouse}
{\xe \v Warehouse\:checkStatus}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b storageStatus} Warehouse::checkStatus ()}}
\par
{\bkmkstart AAAAAAAAGT}
{\bkmkend AAAAAAAAGT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Check the current status of the warehouse and updates the capacity attribute inherited from the {\b Storage} class. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Check the current status of the warehouse and update the capacity attribute inherited from the {\b Storage} class.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
storageStatus The status of the warehouse: EMPTY, AVAILABLE, or FULL. \par
}}}{
Definition at line {\b 33} of file {\b Warehouse.cpp}.}\par
}
{\xe \v getCurrentCapacity\:Warehouse}
{\xe \v Warehouse\:getCurrentCapacity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double Warehouse::getCurrentCapacity () const}}
\par
{\bkmkstart AAAAAAAAGU}
{\bkmkend AAAAAAAAGU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the capacity of the warehouse. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the current capacity of the warehouse. \par
}{
Definition at line {\b 263} of file {\b Warehouse.cpp}.}\par
}
{\xe \v getLocation\:Warehouse}
{\xe \v Warehouse\:getLocation}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QString Warehouse::getLocation () const}}
\par
{\bkmkstart AAAAAAAAGV}
{\bkmkend AAAAAAAAGV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the location of the warehouse. }}\par
{
Definition at line {\b 247} of file {\b Warehouse.cpp}.}\par
}
{\xe \v getName\:Warehouse}
{\xe \v Warehouse\:getName}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QString Warehouse::getName (int  {\i productId})}}
\par
{\bkmkstart AAAAAAAAGW}
{\bkmkend AAAAAAAAGW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the name of a product by its ID. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i productId} \cell }{The ID of the product. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
QString The name of the product. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
< Contains false if the product was not found in the productList.\par
}{
Definition at line {\b 184} of file {\b Warehouse.cpp}.}\par
}
{\xe \v getPrice\:Warehouse}
{\xe \v Warehouse\:getPrice}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double Warehouse::getPrice (int  {\i productId})}}
\par
{\bkmkstart AAAAAAAAGX}
{\bkmkend AAAAAAAAGX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the price of a product by its ID. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i productId} \cell }{The ID of the product. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
double The price of the product. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
< Contains false if the product was not found in the productList.\par
}{
Definition at line {\b 205} of file {\b Warehouse.cpp}.}\par
}
{\xe \v getProductList\:Warehouse}
{\xe \v Warehouse\:getProductList}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QList< {\b Product} > Warehouse::getProductList () const}}
\par
{\bkmkstart AAAAAAAAGY}
{\bkmkend AAAAAAAAGY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the list of the products. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the list of the products stored in the warehouse. \par
}{
Definition at line {\b 255} of file {\b Warehouse.cpp}.}\par
}
{\xe \v getQuantity\:Warehouse}
{\xe \v Warehouse\:getQuantity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Warehouse::getQuantity (int  {\i productId})}}
\par
{\bkmkstart AAAAAAAAGZ}
{\bkmkend AAAAAAAAGZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Get the quantity of a product by its ID. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i productId} \cell }{The ID of the product. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
int The quantity of the product. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
< Contains false if the product was not found in the productList.\par
}{
Definition at line {\b 226} of file {\b Warehouse.cpp}.}\par
}
{\xe \v sell\:Warehouse}
{\xe \v Warehouse\:sell}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b status} Warehouse::sell (int  {\i quantityToSell}, int  {\i productId})}}
\par
{\bkmkstart AAAAAAAAHA}
{\bkmkend AAAAAAAAHA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sell a quantity of a product from the warehouse. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i quantityToSell} \cell }{The quantity of the product to sell. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i productId} \cell }{The ID of the product. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
status SUCCESS if the product is sold, ERROR otherwise. \par
}}}{
Definition at line {\b 169} of file {\b Warehouse.cpp}.}\par
}
{\xe \v updatePrice\:Warehouse}
{\xe \v Warehouse\:updatePrice}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b status} Warehouse::updatePrice (double  {\i newPrice}, int  {\i productId})}}
\par
{\bkmkstart AAAAAAAAHB}
{\bkmkend AAAAAAAAHB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Update the price of a product in the warehouse. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i newPrice} \cell }{The new price of the product. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i productId} \cell }{The ID of the product. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
status SUCCESS if the price is updated, ERROR otherwise. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
< Contains false if the product was not found in the productList.\par
}{
Definition at line {\b 112} of file {\b Warehouse.cpp}.}\par
}
{\xe \v updateStatus\:Warehouse}
{\xe \v Warehouse\:updateStatus}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b status} Warehouse::updateStatus (int  {\i newCapacity})}}
\par
{\bkmkstart AAAAAAAAHC}
{\bkmkend AAAAAAAAHC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Update the storage capacity of the warehouse. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i newCapacity} \cell }{The new capacity of the warehouse. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
status SUCCESS if the operation is successful, ERROR otherwise. \par
}}}{
Definition at line {\b 60} of file {\b Warehouse.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v warehouseId\:Warehouse}
{\xe \v Warehouse\:warehouseId}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Warehouse::warehouseId = 0{\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAHD}
{\bkmkend AAAAAAAAHD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Unique identifier for the warehouse. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Static variable initialization. \par
}{
Definition at line {\b 35} of file {\b Warehouse.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/Warehouse/{\b Warehouse.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/Warehouse/{\b Warehouse.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
WarehouseReport Class Reference\par \pard\plain 
{\tc\tcl2 \v WarehouseReport}
{\xe \v WarehouseReport}
{\bkmkstart AAAAAAAAHE}
{\bkmkend AAAAAAAAHE}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The {\b WarehouseReport} class extends the {\b Report} class to provide a report specifically for warehouse inventory. }}\par
{
{\f2 #include <WarehouseReport.h>}}\par
Inheritance diagram for WarehouseReport:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_warehouse_report.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b WarehouseReport} (int warehouseId, double capacity, QList< {\b ProductReport} > productList, double operationalCosts, double netProfit)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a new {\b WarehouseReport} object. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
QString {\b generateReport} () const\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Generates a detailed warehouse inventory report. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The {\b WarehouseReport} class extends the {\b Report} class to provide a report specifically for warehouse inventory. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This class inherits from {\b Report} and is responsible for generating a warehouse report, which includes details such as warehouse ID, capacity, and a list of products stored. \par
}{
Definition at line {\b 19} of file {\b WarehouseReport.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v WarehouseReport\:WarehouseReport}
{\xe \v WarehouseReport\:WarehouseReport}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
WarehouseReport::WarehouseReport (int  {\i warehouseId}, double  {\i capacity}, QList< {\b ProductReport} >  {\i productList}, double  {\i operationalCosts}, double  {\i netProfit})}}
\par
{\bkmkstart AAAAAAAAHF}
{\bkmkend AAAAAAAAHF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construct a new {\b WarehouseReport} object. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i warehouseId} \cell }{Unique identifier for the warehouse. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i capacity} \cell }{Total storage capacity of the warehouse. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i productList} \cell }{List of products stored in the warehouse. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i operationalCosts} \cell }{Operational costs of the store. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i netProfit} \cell }{Net profit of the store. \cell }
{\row }
}
}{
Definition at line {\b 11} of file {\b WarehouseReport.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v generateReport\:WarehouseReport}
{\xe \v WarehouseReport\:generateReport}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QString WarehouseReport::generateReport () const}}
\par
{\bkmkstart AAAAAAAAHG}
{\bkmkend AAAAAAAAHG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Generates a detailed warehouse inventory report. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
A formatted string representing the warehouse inventory report. \par
}}}{
Definition at line {\b 21} of file {\b WarehouseReport.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/WarehouseReport/{\b WarehouseReport.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/WarehouseReport/{\b WarehouseReport.cpp}\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Documentation{\tc \v File Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
README.md File Reference\par \pard\plain 
{\tc\tcl2 \v README.md}
{\xe \v README.md}
{\bkmkstart AAAAAAAABC}
{\bkmkend AAAAAAAABC}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/Event/Event.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/Event/Event.cpp}
{\xe \v src/Event/Event.cpp}
{\bkmkstart AAAAAAAABD}
{\bkmkend AAAAAAAABD}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file of the {\b Event} class. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Event.h"}\par
{\f2 #include <QRandomGenerator>}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file of the {\b Event} class. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition in file {\b Event.cpp}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Event.cpp\par \pard\plain 
{\tc\tcl2 \v src/Event/Event.cpp}
{\xe \v src/Event/Event.cpp}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00006 {\cf21 #include "Event.h"}\par
00007 {\cf21 #include <QRandomGenerator>}\par
00008 \par
00012 Event::Event(QString eventType, QDateTime time)\par
00013 \{\par
00014     {\cf17 this} -> eventType = eventType;\par
00015     {\cf17 this} -> time = time;\par
00016 \}\par
00017 \par
00025 Event Event::generateEvent(QString eventType, {\cf18 int} seed)\par
00026 \{\par
00027     QDateTime time = QDateTime::currentDateTime().addMSecs(QRandomGenerator::global() -> bounded(seed));\par
00028     {\cf19 return} Event(eventType, time);\par
00029 \}\par
00030 \par
00031 {\cf20 // Getters implementation}\par
00032 \par
00038 QString Event::getEventType(){\cf17  const}\par
00039 {\cf17 }\{\par
00040     {\cf19 return} eventType;\par
00041 \}\par
00042 \par
00048 QDateTime Event::getTime(){\cf17  const}\par
00049 {\cf17 }\{\par
00050     {\cf19 return} time;\par
00051 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/Event/Event.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/Event/Event.h}
{\xe \v src/Event/Event.h}
{\bkmkstart AAAAAAAABE}
{\bkmkend AAAAAAAABE}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Header file of the {\b Event} class. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <QDateTime>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Event}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The {\b Event} class represents an event in the warehouse simulation. }}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Header file of the {\b Event} class. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition in file {\b Event.h}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Event.h\par \pard\plain 
{\tc\tcl2 \v src/Event/Event.h}
{\xe \v src/Event/Event.h}
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00006 {\cf21 #ifndef EVENT_H}\par
00007 {\cf21 #define EVENT_H}\par
00008 \par
00009 {\cf21 #include <QDateTime>}\par
00010 \par
00017 {\cf17 class }Event\par
00018 \{\par
00019 {\cf17 private}:\par
00020     QString eventType; \par
00021     QDateTime time;    \par
00022 \par
00023 {\cf17 public}:\par
00031     Event(QString eventType, QDateTime time);\par
00032 \par
00041     {\cf17 static} Event generateEvent(QString eventType, {\cf18 int} seed);\par
00042 \par
00043     {\cf20 // Getters}\par
00044     QString getEventType() {\cf17 const}; \par
00045     QDateTime getTime() {\cf17 const};    \par
00046 \};\par
00047 \par
00048 {\cf21 #endif }{\cf20 // EVENT_H}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/gui/gui.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/gui/gui.cpp}
{\xe \v src/gui/gui.cpp}
{\bkmkstart AAAAAAAABF}
{\bkmkend AAAAAAAABF}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file for the {\b GUI} class. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "gui.h"}\par
{\f2 #include "./ui_gui.h"}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file for the {\b GUI} class. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition in file {\b gui.cpp}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gui.cpp\par \pard\plain 
{\tc\tcl2 \v src/gui/gui.cpp}
{\xe \v src/gui/gui.cpp}
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00006 {\cf21 #include "gui.h"}\par
00007 {\cf21 #include "./ui_gui.h"}\par
00008 \par
00014 GUI::GUI(GUIElement *parent)\par
00015     : QMainWindow(parent)\par
00016     , ui(new Ui::GUI)\par
00017 \{\par
00018     ui->setupUi({\cf17 this});\par
00019     render();\par
00020 \}\par
00021 \par
00025 GUI::~GUI()\par
00026 \{\par
00027     {\cf17 delete} ui;\par
00028 \}\par
00029 \par
00033 {\cf18 void} GUI::render() \par
00034 \{\par
00035     ui -> stackedWidget -> setCurrentIndex(0);\par
00036 \par
00037     {\cf20 //Warehouse page}\par
00038     Warehouse warehouse;\par
00039     warehouse.id = 1;\par
00040     warehouses.append(warehouse);\par
00041     loadCurrentWarehouseData();\par
00042 \par
00043     ui->productTable->setEditTriggers(QAbstractItemView::NoEditTriggers);\par
00044     ui->productTable->horizontalHeader()->setSectionResizeMode(QHeaderView::Stretch);\par
00045     ui->productTable->setStyleSheet({\cf22 "QHeaderView::section \{ font-size: 15pt; \}"});\par
00046 \par
00047     {\cf20 //Settings page}\par
00048     ui -> configFileEdit -> setDisabled({\cf17 true});\par
00049     ui -> seedEdit -> setText(QString::number(seed));\par
00050     ui -> cyclesEdit -> setText(QString::number(cycles));\par
00051     ui -> configFileEdit -> setText(filename);\par
00052 \par
00053     {\cf20 //Simulation page}\par
00054     ui->statisticList->setEditTriggers(QAbstractItemView::NoEditTriggers);\par
00055     ui->statisticList->horizontalHeader()->setSectionResizeMode(QHeaderView::Stretch);\par
00056     ui->statisticList->setStyleSheet({\cf22 "QHeaderView::section \{ font-size: 15pt; \}"});\par
00057 \par
00058     ui->raportList->setEditTriggers(QAbstractItemView::NoEditTriggers);\par
00059     ui->raportList->horizontalHeader()->setSectionResizeMode(QHeaderView::Stretch);\par
00060     ui->raportList->setStyleSheet({\cf22 "QHeaderView::section \{ font-size: 15pt; \}"});\par
00061 \}\par
00062 \par
00069 {\cf18 void} GUI::on_addbutton_clicked()\par
00070 \{\par
00071     {\cf19 if}(warehouses[0].name == {\cf22 ""})\par
00072     \{\par
00073         warehouses[0].name = QInputDialog::getText({\cf17 this}, {\cf22 "Add warehouse"}, {\cf22 "Please enter warehouse location below: "});\par
00074         warehouses[0].capacity = QInputDialog::getInt({\cf17 this}, {\cf22 "Add warehouse"}, {\cf22 "Please enter warehouse capacity below: "});\par
00075     \}\par
00076     ui->stackedWidget->setCurrentIndex(1);\par
00077 \}\par
00078 \par
00082 {\cf18 void} GUI::on_back_to_menu_clicked()\par
00083 \{\par
00084     ui->stackedWidget->setCurrentIndex(0);\par
00085 \}\par
00086 \par
00090 {\cf18 void} GUI::on_back_to_menu_2_clicked()\par
00091 \{\par
00092     ui->stackedWidget->setCurrentIndex(0);\par
00093 \}\par
00094 \par
00098 {\cf18 void} GUI::on_back_to_menu_3_clicked()\par
00099 \{\par
00100     ui->stackedWidget->setCurrentIndex(0);\par
00101 \}\par
00102 \par
00106 {\cf18 void} GUI::on_settings_button_clicked()\par
00107 \{\par
00108     ui->stackedWidget->setCurrentIndex(2);\par
00109 \}\par
00110 \par
00114 {\cf18 void} GUI::on_start_simulation_button_clicked()\par
00115 \{\par
00116     ui->stackedWidget->setCurrentIndex(3);\par
00117 \}\par
00118 \par
00122 {\cf18 void} GUI::on_aboutButton_clicked()\par
00123 \{\par
00124     QApplication::aboutQt();\par
00125 \}\par
00126 \par
00130 {\cf18 void} GUI::on_configFileButton_clicked()\par
00131 \{\par
00132     filename = QFileDialog::getOpenFileName({\cf17 this}, {\cf22 "Choose setting file"}, {\cf22 "settings.csv"}, {\cf22 "*.csv"});\par
00133     {\cf19 if}(filename == {\cf22 ""})\par
00134     \{\par
00135         QMessageBox::information({\cf17 this}, {\cf22 "Settings "}, {\cf22 "No file selected."});\par
00136         ui -> configFileEdit -> setText(filename);\par
00137     \}\par
00138     {\cf19 else}\par
00139     \{\par
00140         ui -> configFileEdit -> setText(filename);\par
00141 \par
00142         QFile file(filename);\par
00143         {\cf19 if} (!file.open(QIODevice::ReadOnly | QIODevice::Text)) \{\par
00144             QMessageBox::critical({\cf17 this}, {\cf22 "Load Data"}, {\cf22 "Cannot open file."});\par
00145             {\cf19 return};\par
00146         \}\par
00147 \par
00148         QTextStream in(&file);\par
00149 \par
00150         warehouses.clear();\par
00151 \par
00152         Warehouse *currentWarehouse = {\cf17 nullptr};\par
00153 \par
00154         {\cf19 while} (!in.atEnd())\par
00155         \{\par
00156             QString line = in.readLine();\par
00157             QStringList fields = line.split({\cf22 ","});\par
00158             {\cf19 if} (fields[0] == {\cf22 "Warehouse"})\par
00159             \{\par
00160                 Warehouse warehouse;\par
00161                 warehouse.id = warehouses.size() + 1;\par
00162                 warehouse.name = fields[1];\par
00163                 warehouse.capacity = fields[2].toInt();\par
00164                 warehouses.append(warehouse);\par
00165                 currentWarehouse = &warehouses.last();\par
00166             \}\par
00167             {\cf19 else} {\cf19 if} (fields[0] == {\cf22 "Product"} && currentWarehouse)\par
00168             \{\par
00169                 {\cf19 if} (fields.size() < 4)\par
00170                 \{\par
00171                     QMessageBox::critical({\cf17 this}, {\cf22 "Load Data"}, {\cf22 "Incorrect product line format."});\par
00172                     {\cf19 continue};\par
00173                 \}\par
00174                 Product product;\par
00175                 product.name = fields[1];\par
00176                 product.price = fields[2].toDouble();\par
00177                 product.quantity = fields[3].toInt();\par
00178                 currentWarehouse->products.append(product);\par
00179             \}\par
00180             {\cf19 else} {\cf19 if} (fields[0] == {\cf22 "Seed"})\par
00181             \{\par
00182                 seed = fields[5].toInt();\par
00183                 ui -> seedEdit -> setText(QString::number(seed));\par
00184             \}\par
00185             {\cf19 else} {\cf19 if} (fields[0] == {\cf22 "Cycles"})\par
00186             \{\par
00187                 cycles = fields[4].toInt();\par
00188                 ui -> cyclesEdit -> setText(QString::number(cycles));\par
00189             \}\par
00190         \}\par
00191         file.close();\par
00192         loadCurrentWarehouseData();\par
00193     \}\par
00194 \}\par
00195 \par
00199 {\cf18 void} GUI::on_back_to_menu_7_clicked()\par
00200 \{\par
00201     seed = ui -> seedEdit -> text().toInt();\par
00202     cycles = ui -> cyclesEdit -> text().toInt();\par
00203     ui->stackedWidget->setCurrentIndex(0);\par
00204 \}\par
00205 \par
00209 {\cf18 void} GUI::on_start_button_clicked()\par
00210 \{\par
00211     ui -> statisticList -> setRowCount(0);\par
00212 \par
00213     {\cf19 if}(warehouses.isEmpty() || seed == 0 || cycles == 0 || warehouses[0].products.isEmpty())\par
00214     \{\par
00215         QMessageBox::warning({\cf17 this}, {\cf22 "Start Simulation"}, {\cf22 "Cannot start simulation without initial conditions."});\par
00216         {\cf19 return};\par
00217     \}\par
00218 \par
00219     QFile file({\cf22 "settings.csv"});\par
00220     {\cf19 if} (!file.open(QIODevice::WriteOnly | QIODevice::Text)) \{\par
00221         QMessageBox::critical({\cf17 this}, {\cf22 "Save Data"}, {\cf22 "Cannot open file."});\par
00222         {\cf19 return};\par
00223     \}\par
00224 \par
00225     QTextStream out(&file);\par
00226     out << {\cf22 "Type,Location,Capacity,Name,Price,Quantity,Cycles,Seed\\n"};\par
00227 \par
00228     {\cf19 for} ({\cf17 const} Warehouse &warehouse : warehouses)\par
00229     \{\par
00230         out << {\cf22 "Warehouse,"} << warehouse.name << {\cf22 ","} << warehouse.capacity << {\cf22 "\\n"};\par
00231 \par
00232         {\cf19 for} ({\cf17 const} Product &product : warehouse.products)\par
00233         \{\par
00234             {\cf18 int} row = ui -> statisticList -> rowCount();\par
00235             ui -> statisticList -> insertRow(row);\par
00236             ui -> statisticList -> setItem(row, 0, {\cf17 new} QTableWidgetItem(QString::number(warehouse.id-1)));\par
00237             ui -> statisticList -> setItem(row, 1, {\cf17 new} QTableWidgetItem(QString::number(row+1)));\par
00238             ui -> statisticList -> setItem(row, 2, {\cf17 new} QTableWidgetItem(product.name));\par
00239             ui -> statisticList -> setItem(row, 3, {\cf17 new} QTableWidgetItem(QString::number(product.price)));\par
00240             ui -> statisticList -> setItem(row, 4, {\cf17 new} QTableWidgetItem(QString::number(product.quantity)));\par
00241             out << {\cf22 "Product,"} << product.name << {\cf22 ","} << product.price << {\cf22 ","} << product.quantity << {\cf22 "\\n"};\par
00242         \}\par
00243         out << {\cf22 "Cycles,,,,"} << cycles << {\cf22 "\\n"};\par
00244         out << {\cf22 "Seed,,,,,"} << seed << {\cf22 "\\n"};\par
00245     \}\par
00246     file.close();\par
00247 \par
00248     SimulationThread *simulationThread = {\cf17 new} SimulationThread();\par
00249     connect(simulationThread, &SimulationThread::finished, simulationThread, &QObject::deleteLater);\par
00250     connect(simulationThread, &SimulationThread::simulationFinished, {\cf17 this}, &GUI::onSimulationFinished);\par
00251     simulationThread->start();\par
00252 \par
00253     setupUpdateTimer();\par
00254     updateTablesFromCSV();\par
00255 \}\par
00256 \par
00260 {\cf18 void} GUI::on_addProductButton_clicked()\par
00261 \{\par
00262     QString name = ui->productNameEntry->text();\par
00263     QString price = ui->productPriceEntry->text();\par
00264     QString quantity = ui->productQuantityEntry->text();\par
00265 \par
00266     {\cf18 bool} priceValidation, quantityValidation;\par
00267     {\cf18 double} priceValue = price.toDouble(&priceValidation);\par
00268     {\cf18 int} quantityValue = quantity.toInt(&quantityValidation);\par
00269 \par
00270     Warehouse &currentWarehouse = warehouses[currentWarehouseIndex];\par
00271     {\cf18 int} currentCapacity = 0;\par
00272     {\cf19 for} ({\cf17 const} Product &product : currentWarehouse.products)\par
00273     \{\par
00274         currentCapacity += product.quantity;\par
00275     \}\par
00276 \par
00277     {\cf19 if}(!priceValidation || !quantityValidation || priceValue < 0 || quantityValue < 0 || currentCapacity + quantityValue > currentWarehouse.capacity)\par
00278     \{\par
00279         QMessageBox::warning({\cf17 this}, {\cf22 "Add Product"}, {\cf22 "Wrong product parameters or exceeding warehouse capacity."});\par
00280         {\cf19 return};\par
00281     \}\par
00282 \par
00283     Product newProduct\{name, priceValue, quantityValue\};\par
00284     currentWarehouse.products.append(newProduct);\par
00285     loadCurrentWarehouseData();\par
00286 \}\par
00287 \par
00288 {\cf18 void} GUI::on_removeButton_clicked()\par
00289 \{\par
00290     QPushButton *button = qobject_cast<QPushButton *>(sender());\par
00291     {\cf19 if}(button)\par
00292     \{\par
00293         {\cf18 int} row = button->property({\cf22 "row"}).toInt();\par
00294         ui->productTable->removeRow(row);\par
00295 \par
00296         Warehouse &currentWarehouse = warehouses[currentWarehouseIndex];\par
00297         {\cf19 if}(row < currentWarehouse.products.size())\par
00298         \{\par
00299             currentWarehouse.products.removeAt(row);\par
00300         \}\par
00301 \par
00302         {\cf19 for}({\cf18 int} currentRow = row; currentRow < ui->productTable->rowCount(); ++currentRow)\par
00303         \{\par
00304             QPushButton *btnRemove = qobject_cast<QPushButton *>(ui->productTable->cellWidget(currentRow, 3));\par
00305             btnRemove->setProperty({\cf22 "row"}, currentRow);\par
00306         \}\par
00307 \par
00308         ui->productTable->update();\par
00309     \}\par
00310 \}\par
00311 \par
00315 {\cf18 void} GUI::loadCurrentWarehouseData()\par
00316 \{\par
00317     ui->productTable->setRowCount(0);\par
00318     Warehouse &currentWarehouse = warehouses[currentWarehouseIndex];\par
00319 \par
00320     ui->warehouseLabel->setText({\cf22 "Warehouse "} + QString::number(currentWarehouse.id));\par
00321 \par
00322     {\cf19 for}({\cf17 const} Product &product : currentWarehouse.products)\par
00323     \{\par
00324         {\cf18 int} currentRow = ui->productTable->rowCount();\par
00325         ui->productTable->insertRow(currentRow);\par
00326 \par
00327         ui->productTable->setItem(currentRow, 0, {\cf17 new} QTableWidgetItem(product.name));\par
00328         ui->productTable->setItem(currentRow, 1, {\cf17 new} QTableWidgetItem(QString::number(product.price)));\par
00329         ui->productTable->setItem(currentRow, 2, {\cf17 new} QTableWidgetItem(QString::number(product.quantity)));\par
00330 \par
00331         QPushButton *btnRemove = {\cf17 new} QPushButton({\cf22 "Remove"});\par
00332         btnRemove->setProperty({\cf22 "row"}, currentRow);\par
00333         connect(btnRemove, &QPushButton::clicked, {\cf17 this}, &GUI::on_removeButton_clicked);\par
00334         ui->productTable->setCellWidget(currentRow, 3, btnRemove);\par
00335     \}\par
00336 \}\par
00337 \par
00341 {\cf18 void} GUI::on_previousWarehouse_clicked()\par
00342 \{\par
00343     {\cf19 if} (currentWarehouseIndex > 0)\par
00344     \{\par
00345         currentWarehouseIndex--;\par
00346     \}\par
00347     {\cf19 else}\par
00348     \{\par
00349         currentWarehouseIndex = warehouses.size() - 1;\par
00350     \}\par
00351     loadCurrentWarehouseData();\par
00352 \}\par
00353 \par
00357 {\cf18 void} GUI::on_nextWarehouse_clicked()\par
00358 \{\par
00359     {\cf19 if} (currentWarehouseIndex == warehouses.size() - 1)\par
00360     \{\par
00361         Warehouse newWarehouse;\par
00362         newWarehouse.id = warehouses.size() + 1;\par
00363         newWarehouse.name = QInputDialog::getText({\cf17 this}, {\cf22 "Add warehouse"}, {\cf22 "Please enter warehouse location below: "});\par
00364         newWarehouse.capacity = QInputDialog::getInt({\cf17 this}, {\cf22 "Add warehouse"}, {\cf22 "Please enter warehouse capacity below: "});\par
00365         warehouses.append(newWarehouse);\par
00366         currentWarehouseIndex = warehouses.size() - 1;\par
00367     \}\par
00368     {\cf19 else}\par
00369     \{\par
00370         currentWarehouseIndex = (currentWarehouseIndex + 1) % warehouses.size();\par
00371     \}\par
00372     loadCurrentWarehouseData();\par
00373 \}\par
00374 \par
00378 {\cf18 void} GUI::on_removeWarehouseButton_clicked()\par
00379 \{\par
00380     {\cf19 if} (warehouses.size() > 1 && currentWarehouseIndex < warehouses.size())\par
00381     \{\par
00382         warehouses.removeAt(currentWarehouseIndex);\par
00383         {\cf19 if} (currentWarehouseIndex == warehouses.size())\par
00384         \{\par
00385             currentWarehouseIndex--;\par
00386         \}\par
00387         loadCurrentWarehouseData();\par
00388     \}\par
00389     {\cf19 else}\par
00390     \{\par
00391         QMessageBox::warning({\cf17 this}, {\cf22 "Remove Warehouse"}, {\cf22 "Cannot remove the only warehouse."});\par
00392     \}\par
00393 \}\par
00394 \par
00398 {\cf18 void} GUI::setupUpdateTimer()\par
00399 \{\par
00400     timer = {\cf17 new} QTimer({\cf17 this});\par
00401     connect(timer, &QTimer::timeout, {\cf17 this}, &GUI::updateTablesFromCSV);\par
00402     timer->start(1000);\par
00403 \}\par
00404 \par
00408 {\cf18 void} GUI::updateTablesFromCSV()\par
00409 \{\par
00410     ui -> raportList -> setRowCount(0);\par
00411     {\cf18 int} cycles = -1;\par
00412     QFile report({\cf22 "SimulationReport.csv"});\par
00413 \par
00414     {\cf19 if}(!report.open(QIODevice::ReadOnly | QIODevice::Text))\par
00415     \{\par
00416         QMessageBox::critical({\cf17 this}, {\cf22 "Read Report"}, {\cf22 "Cannot open report file to read."});\par
00417         {\cf19 return};\par
00418     \}\par
00419 \par
00420     {\cf18 int} currentWarehouse;\par
00421     {\cf18 int} statisticRow = 0;\par
00422 \par
00423     QTextStream in(&report);\par
00424 \par
00425     {\cf19 while}(!in.atEnd())\par
00426     \{\par
00427         QString line = in.readLine();\par
00428         {\cf19 if}(line.isEmpty())\par
00429         \{\par
00430             statisticRow = 0;\par
00431             cycles++;\par
00432         \}\par
00433         {\cf19 else} {\cf19 if}(line.contains({\cf22 "Warehouse ID,Capacity"}))\par
00434         \{\par
00435             line = in.readLine();\par
00436 \par
00437             QStringList fields = line.split({\cf23 ','});\par
00438             currentWarehouse = fields[0].toInt();\par
00439             {\cf18 int} capacity = fields[1].toInt();\par
00440             QString location = warehouses[currentWarehouse].name;\par
00441             {\cf18 int} sold = 0;\par
00442 \par
00443             line = in.readLine();\par
00444             {\cf19 if}(!line.contains({\cf22 "Product Name,Price,Quantity"}))\par
00445             \{\par
00446                 {\cf19 break};\par
00447             \}\par
00448             line = in.readLine();\par
00449             {\cf19 while}(!line.contains({\cf22 "Sales ID,Time"}))\par
00450             \{\par
00451                 QString productName;\par
00452                 {\cf18 double} price;\par
00453                 {\cf18 int} quantity;\par
00454 \par
00455                 fields = line.split({\cf22 ","});\par
00456 \par
00457                 productName = fields[0];\par
00458                 price = fields[1].toDouble();\par
00459                 quantity = fields[2].toInt();\par
00460 \par
00461                 ui -> statisticList -> item(statisticRow, 2) -> setText(productName);\par
00462                 ui -> statisticList -> item(statisticRow, 3) -> setText(QString::number(price));\par
00463                 ui -> statisticList -> item(statisticRow, 4) -> setText(QString::number(quantity));\par
00464                 ui -> statisticList -> update();\par
00465                 statisticRow++;\par
00466                 line = in.readLine();\par
00467             \}\par
00468             line = in.readLine();\par
00469             line = in.readLine();\par
00470             {\cf19 if}(!line.contains({\cf22 "Product Name,Price,Quantity"}))\par
00471             \{\par
00472                 {\cf19 break};\par
00473             \}\par
00474             line = in.readLine();\par
00475             {\cf19 while}(!line.contains({\cf22 "Operational Costs,Net Profit"}))\par
00476             \{\par
00477                 fields = line.split({\cf22 ","});\par
00478                 sold += fields[2].toInt();\par
00479                 line = in.readLine();\par
00480             \}\par
00481 \par
00482             line = in.readLine();\par
00483             fields = line.split({\cf22 ","});\par
00484 \par
00485             {\cf18 double} costs = fields[0].toDouble();\par
00486             {\cf18 double} netProfit = fields[1].toDouble();\par
00487 \par
00488             {\cf18 int} row = ui -> raportList -> rowCount();\par
00489             ui -> raportList -> insertRow(row);\par
00490             ui -> raportList -> setItem(row, 0, {\cf17 new} QTableWidgetItem(QString::number(cycles)));\par
00491             ui -> raportList -> setItem(row, 1, {\cf17 new} QTableWidgetItem(QString::number(currentWarehouse)));\par
00492             ui -> raportList -> setItem(row, 2, {\cf17 new} QTableWidgetItem(location));\par
00493             ui -> raportList -> setItem(row, 3, {\cf17 new} QTableWidgetItem(QString::number(sold)));\par
00494             ui -> raportList -> setItem(row, 4, {\cf17 new} QTableWidgetItem(QString::number(capacity)));\par
00495             ui -> raportList -> setItem(row, 5, {\cf17 new} QTableWidgetItem(QString::number(costs)));\par
00496             ui -> raportList -> setItem(row, 6, {\cf17 new} QTableWidgetItem(QString::number(netProfit)));\par
00497             ui -> raportList -> update();\par
00498         \}\par
00499     \}\par
00500     report.close();\par
00501 \}\par
00502 \par
00506 {\cf18 void} GUI::onSimulationFinished()\par
00507 \{\par
00508     timer -> stop();\par
00509     updateTablesFromCSV();\par
00510 \par
00511     QMessageBox::StandardButton reply;\par
00512     reply = QMessageBox::question({\cf17 this}, {\cf22 "Save Report"}, {\cf22 "Do you want to save the report in a location other than the default one?"}, QMessageBox::Yes|QMessageBox::No);\par
00513 \par
00514     QString filePath;\par
00515     {\cf19 if} (reply == QMessageBox::Yes)\par
00516     \{\par
00517         filePath = QFileDialog::getSaveFileName({\cf17 this}, {\cf22 "Save Report"}, {\cf22 "SimulationReport.csv"}, {\cf22 "*.csv"});\par
00518         {\cf19 if} (!filePath.isEmpty())\par
00519         \{\par
00520             QFile::copy({\cf22 "SimulationReport.csv"}, filePath);\par
00521         \}\par
00522     \}\par
00523 \par
00524     reply = QMessageBox::question({\cf17 this}, {\cf22 "Save data"}, {\cf22 "Do you want to save data from the table 'Raport'?"}, QMessageBox::Yes|QMessageBox::No);\par
00525 \par
00526     {\cf19 if} (reply == QMessageBox::Yes)\par
00527     \{\par
00528         filePath = QFileDialog::getSaveFileName({\cf17 this}, {\cf22 "Save Report"}, {\cf22 "GUIReport.csv"}, {\cf22 "*.csv"});\par
00529 \par
00530         QFile file(filePath);\par
00531         {\cf19 if}(file.open(QIODevice::WriteOnly | QIODevice::Text))\par
00532         \{\par
00533             QTextStream stream(&file);\par
00534             stream << {\cf22 "Cycle,Warehouse ID,Location,Sold Products,Capacity,Operational Costs,Net Profit\\n"};\par
00535             {\cf19 for}({\cf18 int} row = 0; row < ui->raportList->rowCount(); ++row)\par
00536             \{\par
00537                 QStringList rowData;\par
00538                 {\cf19 for}({\cf18 int} column = 0; column < ui->raportList->columnCount(); ++column)\par
00539                 \{\par
00540                     QTableWidgetItem *item = ui->raportList->item(row, column);\par
00541                     {\cf19 if}(item)\par
00542                     \{\par
00543                         rowData << item -> text();\par
00544                     \}\par
00545                     {\cf19 else}\par
00546                     \{\par
00547                         rowData << {\cf22 ""};\par
00548                     \}\par
00549                 \}\par
00550                 stream << rowData.join({\cf22 ","}) << {\cf22 "\\n"};\par
00551             \}\par
00552             file.close();\par
00553         \}\par
00554         {\cf19 else}\par
00555         \{\par
00556             QMessageBox::critical({\cf17 this}, {\cf22 "Export to CSV"}, {\cf22 "Cannot open file for writing."});\par
00557         \}\par
00558     \}\par
00559 \par
00560     reply = QMessageBox::question({\cf17 this}, {\cf22 "Save Settings"}, {\cf22 "Do you want to save yours settings in a location other than the default one?"}, QMessageBox::Yes|QMessageBox::No);\par
00561 \par
00562     {\cf19 if} (reply == QMessageBox::Yes)\par
00563     \{\par
00564         filePath = QFileDialog::getSaveFileName({\cf17 this}, {\cf22 "Save Settings"}, {\cf22 "settings.csv"}, {\cf22 "*.csv"});\par
00565         {\cf19 if} (!filePath.isEmpty())\par
00566         \{\par
00567             QFile::copy({\cf22 "settings.csv"}, filePath);\par
00568         \}\par
00569     \}\par
00570 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/gui/gui.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/gui/gui.h}
{\xe \v src/gui/gui.h}
{\bkmkstart AAAAAAAABG}
{\bkmkend AAAAAAAABG}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Header file for the {\b GUI} class. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <QMainWindow>}\par
{\f2 #include "Simulation/Simulation.h"}\par
{\f2 #include <QMessageBox>}\par
{\f2 #include <QFileDialog>}\par
{\f2 #include <QFile>}\par
{\f2 #include <QTextStream>}\par
{\f2 #include <QInputDialog>}\par
{\f2 #include <QTimer>}\par
{\f2 #include <QThread>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b SimulationThread}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The {\b SimulationThread} class is responsible for running the simulation in a separate thread. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b GUI}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The {\b GUI} class inherits from QMainWindow and represents the main window of the application. }}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b Ui}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Typedefs\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b GUIEvent} = QEvent\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Alias for QEvent representing {\b GUI} events. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b GUIElement} = QWidget\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Alias for QWidget representing {\b GUI} elements. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Header file for the {\b GUI} class. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Declares the {\b GUI} class and its members, which manage the user interface for the application. \par
}{
Definition in file {\b gui.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Typedef Documentation\par
\pard\plain 
{\xe \v GUIElement\:gui.h}
{\xe \v gui.h\:GUIElement}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b GUIElement} = QWidget}}
\par
{\bkmkstart AAAAAAAABH}
{\bkmkend AAAAAAAABH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Alias for QWidget representing {\b GUI} elements. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
GUIElement is an alias for QWidget and represents the basic unit of user interface elements in Qt. It can be used to refer to any widget that is part of the {\b GUI}, such as buttons, labels, text fields, etc. \par
}{
Definition at line {\b 38} of file {\b gui.h}.}\par
}
{\xe \v GUIEvent\:gui.h}
{\xe \v gui.h\:GUIEvent}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b GUIEvent} = QEvent}}
\par
{\bkmkstart AAAAAAAABI}
{\bkmkend AAAAAAAABI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Alias for QEvent representing {\b GUI} events. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
GUIEvent is an alias for QEvent and is used to handle all user interactions with the graphical user interface, such as mouse clicks, key presses, and more. \par
}{
Definition at line {\b 28} of file {\b gui.h}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gui.h\par \pard\plain 
{\tc\tcl2 \v src/gui/gui.h}
{\xe \v src/gui/gui.h}
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00008 {\cf21 #ifndef GUI_H}\par
00009 {\cf21 #define GUI_H}\par
00010 \par
00011 {\cf21 #include <QMainWindow>}\par
00012 {\cf21 #include "Simulation/Simulation.h"}\par
00013 {\cf21 #include <QMessageBox>}\par
00014 {\cf21 #include <QFileDialog>}\par
00015 {\cf21 #include <QFile>}\par
00016 {\cf21 #include <QTextStream>}\par
00017 {\cf21 #include <QInputDialog>}\par
00018 {\cf21 #include <QTimer>}\par
00019 {\cf21 #include <QThread>}\par
00020 \par
00028 {\cf17 using }GUIEvent = QEvent;\par
00029 \par
00038 {\cf17 using }GUIElement = QWidget;\par
00039 \par
00047 {\cf17 class }SimulationThread : {\cf17 public} QThread\par
00048 \{\par
00049     Q_OBJECT\par
00050 {\cf17 public}:\par
00058     {\cf18 void} run(){\cf17  override}\par
00059 {\cf17     }\{\par
00060         Simulation simulation;\par
00061         simulation.run();\par
00062         emit simulationFinished();\par
00063     \}\par
00064 signals:\par
00068     {\cf18 void} simulationFinished();\par
00069 \};\par
00070 \par
00071 {\cf17 namespace }Ui \{\par
00072 {\cf17 class }GUI;\par
00073 \}\par
00074 \par
00082 {\cf17 class }GUI : {\cf17 public} QMainWindow\par
00083 \{\par
00084     Q_OBJECT\par
00085 \par
00086 {\cf17 public}:\par
00092     {\cf17 explicit} GUI(GUIElement *parent = {\cf17 nullptr});\par
00093 \par
00097     ~GUI();\par
00098 \par
00106     {\cf18 void} render();\par
00107 \par
00118     {\cf18 void} updateGUI(GUIEvent& event);\par
00119 \par
00130     {\cf18 void} handleEvents(GUIEvent& event);\par
00131 \par
00132 {\cf17 private} slots:\par
00139     {\cf18 void} on_addbutton_clicked();\par
00140 \par
00146     {\cf18 void} on_back_to_menu_clicked();\par
00147 \par
00154     {\cf18 void} on_back_to_menu_2_clicked();\par
00155 \par
00162     {\cf18 void} on_back_to_menu_3_clicked();\par
00163 \par
00169     {\cf18 void} on_settings_button_clicked();\par
00170 \par
00177     {\cf18 void} on_start_simulation_button_clicked();\par
00178 \par
00184     {\cf18 void} on_aboutButton_clicked();\par
00185 \par
00192     {\cf18 void} on_configFileButton_clicked();\par
00193 \par
00199     {\cf18 void} on_back_to_menu_7_clicked();\par
00200 \par
00207     {\cf18 void} on_start_button_clicked();\par
00208 \par
00215     {\cf18 void} on_addProductButton_clicked();\par
00216 \par
00222     {\cf18 void} on_removeButton_clicked();\par
00223 \par
00229     {\cf18 void} on_previousWarehouse_clicked();\par
00230 \par
00237     {\cf18 void} on_nextWarehouse_clicked();\par
00238 \par
00244     {\cf18 void} on_removeWarehouseButton_clicked();\par
00245 \par
00246 {\cf17 private}:\par
00247     Ui::GUI *ui; \par
00248 \par
00256     {\cf17 struct }Product\par
00257     \{\par
00258         QString name;     \par
00259         {\cf18 double} price;     \par
00260         {\cf18 int} quantity;     \par
00261     \};\par
00262 \par
00270     {\cf17 struct }Warehouse\par
00271     \{\par
00272         {\cf18 int} id;                   \par
00273         {\cf18 int} capacity;             \par
00274         QString name;             \par
00275         QList<Product> products;  \par
00276     \};\par
00277 \par
00278     QList<Warehouse> warehouses; \par
00279     {\cf18 int} currentWarehouseIndex = 0; \par
00280 \par
00281     QString filename; \par
00282     {\cf18 int} seed = 100;    \par
00283     {\cf18 int} cycles = 10; \par
00284 \par
00285     QTimer *timer; \par
00286 \par
00293     {\cf18 void} loadCurrentWarehouseData();\par
00294 \par
00301     {\cf18 void} setupUpdateTimer();\par
00302 \par
00309     {\cf18 void} updateTablesFromCSV();\par
00310 \par
00317     {\cf18 void} onSimulationFinished();\par
00318 \};\par
00319 \par
00320 {\cf21 #endif }{\cf20 // GUI_H}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/main.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/main.cpp}
{\xe \v src/main.cpp}
{\bkmkstart AAAAAAAABJ}
{\bkmkend AAAAAAAABJ}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Main entry point for the {\b Warehouse} Simulator application. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "gui/gui.h"}\par
{\f2 #include "Simulation/Simulation.h"}\par
{\f2 #include <iostream>}\par
{\f2 #include <QFile>}\par
{\f2 #include <QTextStream>}\par
{\f2 #include <QApplication>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b createConfigFile} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Creates a configuration file for the simulation. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} (int argc, char *argv[])\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Main function of the application. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Main entry point for the {\b Warehouse} Simulator application. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition in file {\b main.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v createConfigFile\:main.cpp}
{\xe \v main.cpp\:createConfigFile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void createConfigFile ()}}
\par
{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Creates a configuration file for the simulation. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function prompts the user to configure the simulation settings and writes them to a CSV file named "settings.csv". \par
}{
Definition at line {\b 19} of file {\b main.cpp}.}\par
}
{\xe \v main\:main.cpp}
{\xe \v main.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main (int  {\i argc}, char *  {\i argv}[])}}
\par
{\bkmkstart AAAAAAAABL}
{\bkmkend AAAAAAAABL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Main function of the application. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This function initializes the application, processes command-line arguments, and starts the {\b GUI} or simulation based on the provided options.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argc} \cell }{Number of command-line arguments. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argv} \cell }{Array of command-line arguments. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Exit code of the application. \par
}}}{
Definition at line {\b 155} of file {\b main.cpp}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
main.cpp\par \pard\plain 
{\tc\tcl2 \v src/main.cpp}
{\xe \v src/main.cpp}
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00006 {\cf21 #include "gui/gui.h"}\par
00007 {\cf21 #include "Simulation/Simulation.h"}\par
00008 {\cf21 #include <iostream>}\par
00009 {\cf21 #include <QFile>}\par
00010 {\cf21 #include <QTextStream>}\par
00011 {\cf21 #include <QApplication>}\par
00012 \par
00019 {\cf18 void} createConfigFile()\par
00020 \{\par
00021     QVector<QString> configLines;\par
00022     QString tempLine;\par
00023 \par
00024     {\cf20 // Open a CSV file for writing.}\par
00025     QFile file({\cf22 "settings.csv"});\par
00026 \par
00027     {\cf19 if}(file.open(QIODevice::WriteOnly | QIODevice::Text))\par
00028     \{\par
00029         QTextStream out(&file);\par
00030 \par
00031         {\cf20 // Write the CSV header.}\par
00032         out << {\cf22 "Type,Location,Capacity,Name,Price,Quantity,Cycles,Seed\\n"};\par
00033 \par
00034         {\cf18 unsigned} {\cf18 short} option = 0;\par
00035         {\cf18 unsigned} {\cf18 int} seed = 0; {\cf20 // Default seed value}\par
00036 \par
00037         {\cf20 // Interactive menu to configure simulation settings.}\par
00038         {\cf19 while}(option != 9)\par
00039         \{\par
00040             {\cf20 // Display options to the user.}\par
00041             std::cout << {\cf22 "\\n\\n***************************"} << std::endl\par
00042                       << {\cf22 "* 1. Add warehouse        *"} << std::endl\par
00043                       << {\cf22 "* 2. Add product          *"} << std::endl\par
00044                       << {\cf22 "* 3. Set number of cycles *"} << std::endl\par
00045                       << {\cf22 "* 4. Set event seed       *"} << std::endl\par
00046                       << {\cf22 "* 5. Undo last change     *"} << std::endl\par
00047                       << {\cf22 "* 9. Exit configuration   *"} << std::endl\par
00048                       << {\cf22 "***************************"} << std::endl;\par
00049 \par
00050             std::cout << {\cf22 "\\n\\nEnter option: "}; std::cin >> option;\par
00051 \par
00052             {\cf20 // Handle user input based on selected option.}\par
00053             {\cf19 switch}(option)\par
00054             \{\par
00055             {\cf19 case} 1:\par
00056             \{\par
00057                 std::string location;\par
00058                 {\cf18 double} capacity;\par
00059                 std::cout << {\cf22 "\\n\\nEnter warehouse location: "}; std::cin >> location;\par
00060                 std::cout << {\cf22 "Enter capacity of warehouse: "}; std::cin >> capacity;\par
00061 \par
00062                 {\cf20 // Write warehouse details to the config file.}\par
00063                 tempLine = {\cf22 "Warehouse,"} + QString::fromStdString(location) + {\cf22 ","} + QString::number(capacity);\par
00064                 configLines.push_back(tempLine);\par
00065                 {\cf19 break};\par
00066             \}\par
00067             {\cf19 case} 2:\par
00068             \{\par
00069                 std::string name;\par
00070                 {\cf18 double} price;\par
00071                 {\cf18 int} quantity;\par
00072                 std::cout << {\cf22 "\\n\\nEnter product name: "}; std::cin >> name;\par
00073                 std::cout << {\cf22 "Enter product price: "}; std::cin >> price;\par
00074                 std::cout << {\cf22 "Enter quantity: "}; std::cin >> quantity;\par
00075 \par
00076                 {\cf20 // Write product details to the config file.}\par
00077                 tempLine = {\cf22 "Product,"} + QString::fromStdString(name) + {\cf22 ","} + QString::number(price) + {\cf22 ","} + QString::number(quantity);\par
00078                 configLines.push_back(tempLine);\par
00079                 {\cf19 break};\par
00080             \}\par
00081             {\cf19 case} 3:\par
00082             \{\par
00083                 {\cf18 int} cycles;\par
00084                 std::cout << {\cf22 "\\n\\nEnter number of cycles: "}; std::cin >> cycles;\par
00085 \par
00086                 {\cf20 // Write the number of cycles to the config file.}\par
00087                 tempLine = {\cf22 "Cycles,,,,"} + QString::number(cycles);\par
00088                 configLines.push_back(tempLine);\par
00089                 {\cf19 break};\par
00090             \}\par
00091             {\cf19 case} 4:\par
00092             \{\par
00093                 std::cout << {\cf22 "\\n\\nEnter seed for event generation: "}; std::cin >> seed;\par
00094 \par
00095                 {\cf20 // Append the seed to the configuration.}\par
00096                 tempLine = {\cf22 "Seed,,,,,"} + QString::number(seed);\par
00097                 configLines.push_back(tempLine);\par
00098                 {\cf19 break};\par
00099             \}\par
00100             {\cf19 case} 5:\par
00101             \{\par
00102                 {\cf20 // Undo the last change.}\par
00103                 {\cf19 if}(!configLines.isEmpty())\par
00104                 \{\par
00105                     configLines.pop_back();\par
00106                     std::cout << {\cf22 "\\nLast change undone.\\n"};\par
00107                 \}\par
00108                 {\cf19 else}\par
00109                 \{\par
00110                     std::cout << {\cf22 "\\nNo changes to undo.\\n"};\par
00111                 \}\par
00112                 {\cf19 break};\par
00113             \}\par
00114             {\cf19 case} 9:\par
00115             \{\par
00116                 {\cf20 // Exit the configuration menu.}\par
00117                 std::cout << {\cf22 "\\nExiting configuration.\\n"};\par
00118                 {\cf19 break};\par
00119             \}\par
00120             {\cf19 default}:\par
00121             \{\par
00122                 {\cf20 // Handle invalid input.}\par
00123                 std::cout << {\cf22 "\\n\\nInvalid option. Please try again."};\par
00124                 {\cf19 break};\par
00125             \}\par
00126             \}\par
00127         \}\par
00128 \par
00129         {\cf20 // Write all lines to the CSV file.}\par
00130         {\cf19 for}({\cf17 const} QString &line : configLines)\par
00131         \{\par
00132             out << line << {\cf22 "\\n"};\par
00133         \}\par
00134 \par
00135         {\cf20 // Close the file after writing.}\par
00136         file.close();\par
00137     \}\par
00138     {\cf19 else}\par
00139     \{\par
00140         {\cf20 // Error handling if the file cannot be opened.}\par
00141         std::cerr << {\cf22 "Error: Can't open file to write."};\par
00142     \}\par
00143 \}\par
00144 \par
00155 {\cf18 int} main({\cf18 int} argc, {\cf18 char} *argv[])\par
00156 \{\par
00157     {\cf18 bool} _gui = {\cf17 true};\par
00158     {\cf18 bool} _config = {\cf17 true};\par
00159 \par
00160     {\cf20 // Process command-line arguments.}\par
00161     {\cf19 for}({\cf18 int} arg = 1; arg < argc; ++arg)\par
00162     \{\par
00163         {\cf19 if}(strcmp(argv[arg], {\cf22 "--nogui"}) == 0)\par
00164         \{\par
00165             _gui = {\cf17 false};\par
00166         \}\par
00167         {\cf19 else} {\cf19 if}(strcmp(argv[arg], {\cf22 "--noconfig"}) == 0)\par
00168         \{\par
00169             _config = {\cf17 false};\par
00170         \}\par
00171         {\cf19 else} {\cf19 if}(strcmp(argv[arg], {\cf22 "--file"}) == 0)\par
00172         \{\par
00173             {\cf20 // Check if there is a filename argument following the --file flag.}\par
00174             {\cf19 if}(arg + 1 < argc)\par
00175             \{\par
00176                 QString inputFileName = argv[arg + 1];\par
00177 \par
00178                 {\cf20 // Check if the file exists.}\par
00179                 {\cf19 if}(QFile::exists(inputFileName))\par
00180                 \{\par
00181                     {\cf20 // Rename the existing configuration file if it exists.}\par
00182                     {\cf19 if}(QFile::exists({\cf22 "settings.csv"}))\par
00183                     \{\par
00184                         QFile::rename({\cf22 "settings.csv"}, {\cf22 "settings_old.csv"});\par
00185                     \}\par
00186 \par
00187                     {\cf20 // Copy the new configuration file.}\par
00188                     QFile::remove({\cf22 "settings.csv"});\par
00189                     QFile::copy(inputFileName, {\cf22 "settings.csv"});\par
00190 \par
00191                     {\cf20 // Skip the filename argument so it's not processed as another flag.}\par
00192                     ++arg;\par
00193 \par
00194                     _config = {\cf17 false};\par
00195                 \}\par
00196                 {\cf19 else}\par
00197                 \{\par
00198                     std::cerr << {\cf22 "The specified file does not exist: "} << inputFileName.toStdString();\par
00199                     {\cf19 return} -1;\par
00200                 \}\par
00201             \}\par
00202             {\cf19 else}\par
00203             \{\par
00204                 std::cerr << {\cf22 "No filename was specified after the --file flag."};\par
00205                 {\cf19 return} -1;\par
00206             \}\par
00207         \}\par
00208     \}\par
00209 \par
00210     QApplication a(argc, argv);\par
00211     GUI w;\par
00212 \par
00213     {\cf20 // Start the GUI if enabled.}\par
00214     {\cf19 if}(_gui)\par
00215     \{\par
00216         w.show();\par
00217     \}\par
00218     {\cf19 else}\par
00219     \{\par
00220         {\cf20 // Create a config file and run the simulation if enabled.}\par
00221         {\cf19 if}(_config)\par
00222         \{\par
00223             createConfigFile();\par
00224         \}\par
00225 \par
00226         Simulation simulation = Simulation();\par
00227         simulation.run();\par
00228         exit(0);\par
00229     \}\par
00230 \par
00231     {\cf20 // Execute the application.}\par
00232     {\cf19 return} a.exec();\par
00233 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test/main.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v test/main.cpp}
{\xe \v test/main.cpp}
{\bkmkstart AAAAAAAABM}
{\bkmkend AAAAAAAABM}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <gtest/gtest.h>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} (int argc, char *argv[])\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v main\:main.cpp}
{\xe \v main.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main (int  {\i argc}, char *  {\i argv}[])}}
\par
{\bkmkstart AAAAAAAABN}
{\bkmkend AAAAAAAABN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 3} of file {\b main.cpp}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
main.cpp\par \pard\plain 
{\tc\tcl2 \v test/main.cpp}
{\xe \v test/main.cpp}
{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include <gtest/gtest.h>}\par
00002 \par
00003 {\cf18 int} main({\cf18 int} argc, {\cf18 char} *argv[]) \{\par
00004     ::testing::InitGoogleTest(&argc, argv);\par
00005     {\cf19 return} RUN_ALL_TESTS();\par
00006 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/Product/Product.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/Product/Product.cpp}
{\xe \v src/Product/Product.cpp}
{\bkmkstart AAAAAAAABO}
{\bkmkend AAAAAAAABO}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Product.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Product.cpp\par \pard\plain 
{\tc\tcl2 \v src/Product/Product.cpp}
{\xe \v src/Product/Product.cpp}
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include "Product.h"}\par
00002 \par
00006 Product::Product({\cf18 int} productId, QString name, {\cf18 double} price, {\cf18 int} quantity)\par
00007 \{\par
00008     {\cf17 this} -> productId = productId;\par
00009 \par
00010     {\cf17 this} -> name = name;\par
00011 \par
00012     {\cf19 if}(price < 0)\par
00013     \{\par
00014         {\cf17 this} -> price = 0;\par
00015     \}\par
00016     {\cf19 else}\par
00017     \{\par
00018         {\cf17 this} -> price = price;\par
00019     \}\par
00020 \par
00021     {\cf19 if}(quantity < 0)\par
00022     \{\par
00023         {\cf17 this} -> quantity = 0;\par
00024     \}\par
00025     {\cf19 else}\par
00026     \{\par
00027         {\cf17 this} -> quantity = quantity;\par
00028     \}\par
00029 \}\par
00030 \par
00034 status Product::sell({\cf18 int} quantityToSell)\par
00035 \{\par
00036     {\cf19 if}(quantityToSell <= 0)\par
00037     \{\par
00038         {\cf19 return} ERROR; {\cf20 // Ensure quantityToSell is positive}\par
00039     \}\par
00040 \par
00041     {\cf19 if}(quantityToSell <= quantity)\par
00042     \{\par
00043         quantity -= quantityToSell;\par
00044         {\cf19 return} SUCCESS;\par
00045     \}\par
00046     {\cf19 else}\par
00047     \{\par
00048         {\cf19 return} ERROR;\par
00049     \}\par
00050 \}\par
00051 \par
00055 status Product::updatePrice({\cf18 double} newPrice)\par
00056 \{\par
00057     {\cf19 if}(newPrice > 0)\par
00058     \{\par
00059         price = newPrice;\par
00060         {\cf19 return} SUCCESS;\par
00061     \}\par
00062     {\cf19 else}\par
00063     \{\par
00064         {\cf19 return} ERROR;\par
00065     \}\par
00066 \}\par
00067 \par
00071 status Product::changeQuantity({\cf18 int} quantity)\par
00072 \{\par
00073     {\cf19 if}(quantity >= 0)\par
00074     \{\par
00075         {\cf17 this} -> quantity = quantity;\par
00076         {\cf19 return} SUCCESS;\par
00077     \}\par
00078     {\cf19 else}\par
00079     \{\par
00080         {\cf19 return} ERROR;\par
00081     \}\par
00082 \}\par
00083 \par
00084 {\cf20 // Getters implementation}\par
00085 \par
00086 QString Product::getName(){\cf17  const}\par
00087 {\cf17 }\{\par
00088     {\cf19 return} name;\par
00089 \}\par
00090 \par
00091 {\cf18 double} Product::getPrice(){\cf17  const}\par
00092 {\cf17 }\{\par
00093     {\cf19 return} price;\par
00094 \}\par
00095 \par
00096 {\cf18 int} Product::getQuantity(){\cf17  const}\par
00097 {\cf17 }\{\par
00098     {\cf19 return} quantity;\par
00099 \}\par
00100 \par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/Product/Product.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/Product/Product.h}
{\xe \v src/Product/Product.h}
{\bkmkstart AAAAAAAABP}
{\bkmkend AAAAAAAABP}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Header file for the {\b Product} class. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <QString>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Product}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The {\b Product} class represents a product with a name, price, and quantity. }}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerations\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b status} \{ {\b SUCCESS}
, {\b ERROR}
 \}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Header file for the {\b Product} class. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition in file {\b Product.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumeration Type Documentation\par
\pard\plain 
{\xe \v status\:Product.h}
{\xe \v Product.h\:status}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b status}}}
\par
{\bkmkstart AAAAAAAABQ}
{\bkmkend AAAAAAAABQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Enum representing the status of operations on {\b Product}. \par
}{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v SUCCESS\:Product.h}
{\xe \v Product.h\:SUCCESS}
{\qr SUCCESS{\bkmkstart AAAAAAAABR}
{\bkmkend AAAAAAAABR}
\cell }{\cell }{\row }
{\xe \v ERROR\:Product.h}
{\xe \v Product.h\:ERROR}
{\qr ERROR{\bkmkstart AAAAAAAABS}
{\bkmkend AAAAAAAABS}
\cell }{\cell }{\row }
}
\par
{
Definition at line {\b 12} of file {\b Product.h}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Product.h\par \pard\plain 
{\tc\tcl2 \v src/Product/Product.h}
{\xe \v src/Product/Product.h}
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00006 {\cf21 #ifndef PRODUCT_H}\par
00007 {\cf21 #define PRODUCT_H}\par
00008 \par
00009 {\cf21 #include <QString>}\par
00010 \par
00012 {\cf17 enum} status \{SUCCESS, ERROR\};\par
00013 \par
00020 {\cf17 class }Product\par
00021 \{\par
00022 {\cf17 private}:\par
00023     QString name;   \par
00024     {\cf18 double} price;   \par
00025     {\cf18 int} quantity;   \par
00026 {\cf17 public}:\par
00027     {\cf18 int} productId;  \par
00028 \par
00037     Product({\cf18 int} productId, QString name, {\cf18 double} price, {\cf18 int} quantity);\par
00038 \par
00045     status sell({\cf18 int} quantityToSell);\par
00046 \par
00053     status updatePrice({\cf18 double} newPrice);\par
00054 \par
00061     status changeQuantity({\cf18 int} quantity);\par
00062 \par
00063     {\cf20 // Getters}\par
00064     QString getName() {\cf17 const};  \par
00065     {\cf18 double} getPrice() {\cf17 const};  \par
00066     {\cf18 int} getQuantity() {\cf17 const};  \par
00067 \};\par
00068 \par
00069 {\cf21 #endif }{\cf20 // PRODUCT_H}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/Report/Report.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/Report/Report.cpp}
{\xe \v src/Report/Report.cpp}
{\bkmkstart AAAAAAAABT}
{\bkmkend AAAAAAAABT}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file for the {\b Report} class. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Report.h"}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file for the {\b Report} class. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition in file {\b Report.cpp}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Report.cpp\par \pard\plain 
{\tc\tcl2 \v src/Report/Report.cpp}
{\xe \v src/Report/Report.cpp}
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00006 {\cf21 #include "Report.h"}\par
00007 \par
00008 {\cf18 double} Report::operationalCosts = 0;\par
00009 {\cf18 double} Report::netProfit = 0;\par
00010 \par
00017 Report::Report({\cf18 double} operationalCosts, {\cf18 double} netProfit)\par
00018 \{\par
00019     setOperationalCosts(operationalCosts);\par
00020     setNetProfit(netProfit);\par
00021 \}\par
00022 \par
00028 QString Report::generateReport(){\cf17  const}\par
00029 {\cf17 }\{\par
00030     {\cf19 return} QString({\cf22 "Operational Costs,Net Profit\\n%1,%2\\n"})\par
00031         .arg(getOperationalCosts())\par
00032         .arg(getNetProfit());\par
00033 \}\par
00034 \par
00035 {\cf20 // Setters implementation}\par
00036 {\cf18 void} Report::setOperationalCosts({\cf18 double} costs)\par
00037 \{\par
00038     operationalCosts = costs;\par
00039 \}\par
00040 \par
00041 {\cf18 void} Report::setNetProfit({\cf18 double} profit)\par
00042 \{\par
00043     netProfit = profit;\par
00044 \}\par
00045 \par
00046 {\cf20 // Getters implementation}\par
00047 {\cf18 double} Report::getOperationalCosts()\par
00048 \{\par
00049     {\cf19 return} operationalCosts;\par
00050 \}\par
00051 \par
00052 {\cf18 double} Report::getNetProfit()\par
00053 \{\par
00054     {\cf19 return} netProfit;\par
00055 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/Report/Report.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/Report/Report.h}
{\xe \v src/Report/Report.h}
{\bkmkstart AAAAAAAABU}
{\bkmkend AAAAAAAABU}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Header file for the {\b Report} class. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <QString>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Report}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Represents a report in the store simulation. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Report::ProductReport}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Represents a report for a single product. }}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Header file for the {\b Report} class. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition in file {\b Report.h}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Report.h\par \pard\plain 
{\tc\tcl2 \v src/Report/Report.h}
{\xe \v src/Report/Report.h}
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00006 {\cf21 #ifndef REPORT_H}\par
00007 {\cf21 #define REPORT_H}\par
00008 \par
00009 {\cf21 #include <QString>}\par
00010 \par
00017 {\cf17 class }Report\par
00018 \{\par
00019 {\cf17 private}:\par
00020     {\cf17 static} {\cf18 double} operationalCosts; \par
00021     {\cf17 static} {\cf18 double} netProfit;        \par
00022 \par
00023 {\cf17 public}:\par
00024 \par
00031     {\cf17 struct }ProductReport\par
00032     \{\par
00033         QString name;   \par
00034         {\cf18 double} price;   \par
00035         {\cf18 int} quantity;   \par
00036     \};\par
00037 \par
00044     Report({\cf18 double} operationalCosts, {\cf18 double} netProfit);\par
00045 \par
00052     QString generateReport() {\cf17 const};\par
00053 \par
00054     {\cf20 // Setters}\par
00055     {\cf17 static} {\cf18 void} setOperationalCosts({\cf18 double} costs); \par
00056     {\cf17 static} {\cf18 void} setNetProfit({\cf18 double} profit);       \par
00057 \par
00058     {\cf20 // Getters}\par
00059     {\cf17 static} {\cf18 double} getOperationalCosts(); \par
00060     {\cf17 static} {\cf18 double} getNetProfit();        \par
00061 \};\par
00062 \par
00063 {\cf21 #endif }{\cf20 // REPORT_H}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/SalesReport/SalesReport.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/SalesReport/SalesReport.cpp}
{\xe \v src/SalesReport/SalesReport.cpp}
{\bkmkstart AAAAAAAABV}
{\bkmkend AAAAAAAABV}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file for the {\b SalesReport} class. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "SalesReport.h"}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file for the {\b SalesReport} class. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition in file {\b SalesReport.cpp}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SalesReport.cpp\par \pard\plain 
{\tc\tcl2 \v src/SalesReport/SalesReport.cpp}
{\xe \v src/SalesReport/SalesReport.cpp}
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00006 {\cf21 #include "SalesReport.h"}\par
00007 \par
00011 SalesReport::SalesReport({\cf18 int} SalesId, QDateTime time, QList<ProductReport> productList, {\cf18 double} operationalCosts, {\cf18 double} netProfit) : Report(operationalCosts, netProfit)\par
00012 \{\par
00013     {\cf17 this} -> salesId = SalesId;\par
00014     {\cf17 this} -> time = time;\par
00015     {\cf17 this} -> productList = productList;\par
00016 \}\par
00017 \par
00021 QString SalesReport::generateReport(){\cf17  const}\par
00022 {\cf17 }\{\par
00023     QString report;\par
00024     report += QString({\cf22 "Sales ID,Time\\n%1,%2\\n"})\par
00025                   .arg(salesId)\par
00026                   .arg(time.toString({\cf22 "yyyy-MM-dd hh:mm:ss"}));\par
00027 \par
00028     report += {\cf22 "Product Name,Price,Quantity Sold\\n"};\par
00029 \par
00030     {\cf19 for}({\cf17 const} ProductReport& product : productList)\par
00031     \{\par
00032         {\cf17 static} {\cf18 int} initialQuantity = 0;\par
00033         {\cf18 int} soldQuantity = abs(initialQuantity - product.quantity);\par
00034         initialQuantity = soldQuantity;\par
00035 \par
00036         {\cf19 if}(soldQuantity <= 0)\par
00037         \{\par
00038             {\cf19 continue};\par
00039         \}\par
00040 \par
00041         report += QString({\cf22 "%1,%2,%3\\n"})\par
00042                       .arg(product.name)\par
00043                       .arg(product.price)\par
00044                       .arg(soldQuantity);\par
00045 \par
00046         setNetProfit(getNetProfit()+product.price * soldQuantity);\par
00047     \}\par
00048 \par
00049     setNetProfit(getNetProfit()-getOperationalCosts());\par
00050 \par
00051     report += Report::generateReport();\par
00052 \par
00053     setNetProfit(getNetProfit()+getOperationalCosts());\par
00054 \par
00055     {\cf19 return} report;\par
00056 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/SalesReport/SalesReport.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/SalesReport/SalesReport.h}
{\xe \v src/SalesReport/SalesReport.h}
{\bkmkstart AAAAAAAABW}
{\bkmkend AAAAAAAABW}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Header file for the {\b SalesReport} class. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Report/Report.h"}\par
{\f2 #include <QDateTime>}\par
{\f2 #include <QList>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b SalesReport}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The {\b SalesReport} class extends the {\b Report} class to provide a report specifically for sales. }}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Header file for the {\b SalesReport} class. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition in file {\b SalesReport.h}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SalesReport.h\par \pard\plain 
{\tc\tcl2 \v src/SalesReport/SalesReport.h}
{\xe \v src/SalesReport/SalesReport.h}
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00006 {\cf21 #ifndef SALESREPORT_H}\par
00007 {\cf21 #define SALESREPORT_H}\par
00008 \par
00009 {\cf21 #include "Report/Report.h"}\par
00010 {\cf21 #include <QDateTime>}\par
00011 {\cf21 #include <QList>}\par
00012 \par
00020 {\cf17 class }SalesReport : Report\par
00021 \{\par
00022 {\cf17 private}:\par
00023     {\cf18 int} salesId; \par
00024     QDateTime time; \par
00025     QList<ProductReport> productList; \par
00026 \par
00027 {\cf17 public}:\par
00037     SalesReport({\cf18 int} salesId, QDateTime time, QList<ProductReport> productList, {\cf18 double} operationalCosts, {\cf18 double} netProfit);\par
00038 \par
00043     QString generateReport() {\cf17 const};\par
00044 \};\par
00045 \par
00046 {\cf21 #endif }{\cf20 // SALESREPORT_H}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/Simulation/Simulation.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/Simulation/Simulation.cpp}
{\xe \v src/Simulation/Simulation.cpp}
{\bkmkstart AAAAAAAABX}
{\bkmkend AAAAAAAABX}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Simulation.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Simulation.cpp\par \pard\plain 
{\tc\tcl2 \v src/Simulation/Simulation.cpp}
{\xe \v src/Simulation/Simulation.cpp}
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include "Simulation.h"}\par
00002 \par
00006 Simulation::Simulation()\par
00007 \{\par
00008     std::cout << {\cf22 "Preparing simulation"} << std::endl;\par
00009 \par
00010     currentTime = QDateTime::currentDateTime();\par
00011 \par
00012     QFile settings({\cf22 "settings.csv"});\par
00013 \par
00014     QFile::rename({\cf22 "SimulationReport.csv"}, {\cf22 "SimulationReportOld.csv"});\par
00015     QFile::remove({\cf22 "SimulationReport.csv"});\par
00016 \par
00017     {\cf19 if}(!settings.open(QIODevice::ReadOnly | QIODevice::Text))\par
00018     \{\par
00019         std::cerr << {\cf22 "Error: Can't open settings file."} << std::endl;\par
00020         {\cf19 return};\par
00021     \}\par
00022     QTextStream in(&settings);\par
00023 \par
00024     seed = 100;\par
00025     {\cf18 int} productIdCounter = 1;\par
00026 \par
00027     {\cf19 while}(!in.atEnd())\par
00028     \{\par
00029         QString line = in.readLine();\par
00030         QStringList fields = line.split({\cf23 ','});\par
00031 \par
00032         {\cf19 if}(fields.isEmpty())\par
00033         \{\par
00034             {\cf19 continue};\par
00035         \}\par
00036 \par
00037         {\cf19 if}(fields[0] == {\cf22 "Warehouse"})\par
00038         \{\par
00039             productIdCounter = 1;\par
00040             {\cf19 if}(fields.size() < 3)\par
00041             \{\par
00042                 std::cerr << {\cf22 "Error: Incomplete warehouse data."} << std::endl;\par
00043                 {\cf19 continue};\par
00044             \}\par
00045             std::cout << {\cf22 "Adding warehouse."} << std::endl;\par
00046             QString location = fields[1];\par
00047             {\cf18 double} capacity = fields[2].toDouble();\par
00048             Warehouses.append(Warehouse(location, capacity));\par
00049         \}\par
00050         {\cf19 else} {\cf19 if}(fields[0] == {\cf22 "Product"})\par
00051         \{\par
00052             {\cf19 if}(fields.size() < 4)\par
00053             \{\par
00054                 std::cerr << {\cf22 "Error: Incomplete product data."} << std::endl;\par
00055                 {\cf19 continue};\par
00056             \}\par
00057             std::cout << {\cf22 "Adding product: "};\par
00058             Warehouse& selectWarehouse = Warehouses.last();\par
00059             QString name = fields[1];\par
00060             {\cf18 double} price = fields[2].toDouble();\par
00061             {\cf18 int} quantity = fields[3].toInt();\par
00062             {\cf18 int} productId = productIdCounter++;\par
00063 \par
00064             {\cf19 if}(selectWarehouse.addProduct(name, price, quantity, productId) == SUCCESS)\par
00065             \{\par
00066                 std::cout << {\cf22 "SUCCESS"} << std::endl;\par
00067             \}\par
00068             {\cf19 else}\par
00069             \{\par
00070                 std::cerr << {\cf22 "ERROR: Unable to add product."} << std::endl;\par
00071             \}\par
00072         \}\par
00073         {\cf19 else} {\cf19 if}(fields[0] == {\cf22 "Cycles"})\par
00074         \{\par
00075             {\cf19 if}(fields.size() < 5)\par
00076             \{\par
00077                 std::cerr << {\cf22 "Error: Incomplete cycle data."} << std::endl;\par
00078                 {\cf19 continue};\par
00079             \}\par
00080             std::cout << {\cf22 "Setting currentCycle: "};\par
00081             {\cf18 int} currentCycle = fields[4].toInt();\par
00082             {\cf17 this} -> currentCycle = currentCycle;\par
00083             std::cout << currentCycle << std::endl;\par
00084         \}\par
00085         {\cf19 else} {\cf19 if}(fields[0] == {\cf22 "Seed"})\par
00086         \{\par
00087             {\cf19 if}(fields.size() < 6)\par
00088             \{\par
00089                 std::cerr << {\cf22 "Error: Incomplete seed data."} << std::endl;\par
00090                 {\cf19 continue};\par
00091             \}\par
00092             std::cout << {\cf22 "Setting seed: "};\par
00093             {\cf18 int} readSeed = fields[5].toInt();\par
00094             {\cf17 this} -> seed = QRandomGenerator::global() -> generate()/readSeed;\par
00095             std::cout << readSeed << std::endl;\par
00096         \}\par
00097     \}\par
00098 \par
00099     settings.close();\par
00100 \}\par
00101 \par
00105 {\cf18 void} Simulation::run()\par
00106 \{\par
00107     std::cout << {\cf22 "Running simulation."} << std::endl;\par
00108 \par
00109     QString report;\par
00110 \par
00111     {\cf19 if}(Warehouses.isEmpty())\par
00112     \{\par
00113         std::cout << {\cf22 "Incorrect settings"} << std::endl;\par
00114         exit(1);\par
00115     \}\par
00116 \par
00117     generateReport();\par
00118 \par
00119     std::cout << {\cf22 "Generating cycles."} << std::endl;\par
00120 \par
00121     {\cf18 int} cycles = currentCycle;\par
00122 \par
00123     {\cf19 while}(currentCycle > 0)\par
00124     \{\par
00125         {\cf18 int} numberOfEvents = QRandomGenerator::global()->bounded(seed);\par
00126 \par
00127         {\cf19 for}({\cf18 int} event = 0; {\cf17 event} < numberOfEvents; ++event)\par
00128         \{\par
00129             events.append(Event::generateEvent({\cf22 "Sell product"}, seed));\par
00130         \}\par
00131 \par
00132         {\cf19 for}(Warehouse& warehouse : Warehouses)\par
00133         \{\par
00134             {\cf19 if}(warehouse.checkStatus() != FULLY)\par
00135             \{\par
00136                 events.append(Event::generateEvent({\cf22 "Add Product"}, seed));\par
00137                 events.append(Event::generateEvent({\cf22 "Transfer Product"}, seed));\par
00138                 std::cout << {\cf22 "\\033[33mWarning: Warehouse at "} << warehouse.getLocation().toStdString()\par
00139                           << {\cf22 " is full. Generated events to add more products or transfer them to another warehouse.\\033[0m"} << std::endl;\par
00140             \}\par
00141         \}\par
00142 \par
00143         std::cout << {\cf22 "Processing cycle."} << std::endl;\par
00144         processEvents();\par
00145 \par
00146         QString cycleReport = generateReport();\par
00147         report.append(cycleReport);\par
00148         std::cout << cycleReport.toStdString() << std::endl;\par
00149         currentCycle--;\par
00150     \}\par
00151 \par
00152     std::cout << report.toStdString() << std::endl;\par
00153 \par
00154 \}\par
00155 \par
00159 {\cf18 void} Simulation::processEvents()\par
00160 \{\par
00161     {\cf19 if}(conductCycle() == ERROR)\par
00162     \{\par
00163         std::cout << {\cf22 "Error while processing cycle"} << std::endl;\par
00164     \}\par
00165 \}\par
00166 \par
00170 status Simulation::conductCycle()\par
00171 \{\par
00172     qint64 deltaTime = 0;\par
00173 \par
00174     {\cf19 for}(Event& event : events)\par
00175     \{\par
00176         {\cf19 if}(!respondToEvent(event))\par
00177         \{\par
00178             std::cout << {\cf22 "Error while processing event."} << std::endl;\par
00179             {\cf19 return} ERROR;\par
00180         \}\par
00181 \par
00182         QDateTime Time = {\cf17 event}.getTime();\par
00183 \par
00184         {\cf19 if}(Time.msecsTo(currentTime) > deltaTime)\par
00185         \{\par
00186             deltaTime = Time.msecsTo(currentTime);\par
00187         \}\par
00188     \}\par
00189 \par
00190     events.clear();\par
00191     currentTime = currentTime.addSecs(deltaTime);\par
00192     {\cf19 return} SUCCESS;\par
00193 \}\par
00194 \par
00198 status Simulation::respondToEvent(Event& event)\par
00199 \{\par
00200     {\cf18 int} warehouseId = QRandomGenerator::global() -> bounded(Warehouses.size());\par
00201     Warehouse& warehouse = Warehouses[warehouseId];\par
00202 \par
00203     {\cf19 if}(event.getEventType() == {\cf22 "Sell product"})\par
00204     \{\par
00205         {\cf19 try}\par
00206         \{\par
00207             {\cf18 int} productId = QRandomGenerator::global() -> bounded(warehouse.getProductList().size()) + 1;\par
00208             status result = warehouse.sell(1, productId);\par
00209             {\cf19 if}(result == ERROR)\par
00210             \{\par
00211                 std::cerr << {\cf22 "ERROR: Unable to sell product."} << std::endl;\par
00212                 {\cf19 return} ERROR;\par
00213             \}\par
00214         \}\par
00215         {\cf19 catch} ({\cf17 const} std::exception& e)\par
00216         \{\par
00217             std::cerr << {\cf22 "General Exception caught: "} << e.what() << std::endl;\par
00218             {\cf19 return} ERROR;\par
00219         \}\par
00220     \}\par
00221     {\cf19 else} {\cf19 if}(event.getEventType() == {\cf22 "Add product"})\par
00222     \{\par
00223         {\cf19 try}\par
00224         \{\par
00225             {\cf18 int} productId = QRandomGenerator::global() -> bounded(warehouse.getProductList().size()) + 1;\par
00226             Product& product = warehouse.getProductList()[productId];\par
00227             {\cf18 int} additionalQuantity = 50;\par
00228             status result = warehouse.changeQuantity(product.getQuantity() + additionalQuantity, productId);\par
00229             {\cf19 if}(result == ERROR)\par
00230             \{\par
00231                 std::cerr << {\cf22 "ERROR: Unable to add product quantity."} << std::endl;\par
00232                 {\cf19 return} ERROR;\par
00233             \}\par
00234         \}\par
00235         {\cf19 catch} ({\cf17 const} std::exception& e)\par
00236         \{\par
00237             std::cerr << {\cf22 "General Exception caught: "} << e.what() << std::endl;\par
00238             {\cf19 return} ERROR;\par
00239         \}\par
00240     \}\par
00241     {\cf19 else} {\cf19 if}(event.getEventType() == {\cf22 "Transfer product"})\par
00242     \{\par
00243         {\cf19 try}\par
00244         \{\par
00245             {\cf18 int} productId = QRandomGenerator::global() -> bounded(warehouse.getProductList().size()) + 1;\par
00246             Product& productToTransfer = warehouse.getProductList()[productId];\par
00247             QString productName = productToTransfer.getName();\par
00248 \par
00249             {\cf17 auto} targetWarehouseIt = Warehouses.end();\par
00250             {\cf19 for} ({\cf17 auto} it = Warehouses.begin(); it != Warehouses.end(); ++it)\par
00251             \{\par
00252                 Warehouse& w = *it;\par
00253                 {\cf18 double} usedCapacity = 0;\par
00254                 {\cf19 for} (Product& p : w.getProductList())\par
00255                 \{\par
00256                     usedCapacity += p.getQuantity();\par
00257                 \}\par
00258                 {\cf19 for} (Product& p : w.getProductList())\par
00259                 \{\par
00260                     {\cf19 if} (p.getName() == productName && w.getCurrentCapacity() > usedCapacity + productToTransfer.getQuantity())\par
00261                     \{\par
00262                         targetWarehouseIt = it;\par
00263                         {\cf19 break};\par
00264                     \}\par
00265                 \}\par
00266                 {\cf19 if} (targetWarehouseIt != Warehouses.end())\par
00267                 \{\par
00268                     {\cf19 break};\par
00269                 \}\par
00270             \}\par
00271 \par
00272             {\cf19 if}(targetWarehouseIt != Warehouses.end())\par
00273             \{\par
00274                 Warehouse& targetWarehouse = *targetWarehouseIt;\par
00275 \par
00276                 {\cf18 int} transferQuantity = productToTransfer.getQuantity();\par
00277                 warehouse.changeQuantity(warehouse.getQuantity(productId) - transferQuantity, productId);\par
00278                 targetWarehouse.changeQuantity(targetWarehouse.getQuantity(productId) + transferQuantity, productId);\par
00279             \}\par
00280             {\cf19 else}\par
00281             \{\par
00282                 std::cerr << {\cf22 "ERROR: No target warehouse found for product transfer."} << std::endl;\par
00283                 {\cf19 return} ERROR;\par
00284             \}\par
00285         \}\par
00286         {\cf19 catch} ({\cf17 const} std::exception& e)\par
00287         \{\par
00288             std::cerr << {\cf22 "General Exception caught: "} << e.what() << std::endl;\par
00289             {\cf19 return} ERROR;\par
00290         \}\par
00291     \}\par
00292     {\cf19 return} SUCCESS;\par
00293 \}\par
00294 \par
00298 QString Simulation::generateReport()\par
00299 \{\par
00300     QString csvReport;\par
00301     {\cf18 int} {\cf18 id} = 0;\par
00302 \par
00303     std::cout << {\cf22 "Generating report"} << std::endl;\par
00304 \par
00305     {\cf19 for}(Warehouse& warehouse : Warehouses)\par
00306     \{\par
00307         QList<Report::ProductReport> productNames;\par
00308         {\cf18 double} featureOperationalCosts;\par
00309         {\cf19 for}(Product& product : warehouse.getProductList())\par
00310         \{\par
00311             Report::ProductReport productReport;\par
00312             productReport.name = product.getName();\par
00313             productReport.price = product.getPrice();\par
00314             productReport.quantity = product.getQuantity();\par
00315 \par
00316             featureOperationalCosts += productReport.price + productReport.quantity;\par
00317 \par
00318             productNames.append(productReport);\par
00319         \}\par
00320 \par
00321         {\cf17 static} {\cf18 int} salesId = 0;\par
00322 \par
00323         WarehouseReport warehouseReport({\cf18 id}++, warehouse.getCurrentCapacity(), productNames, Report::getOperationalCosts(), Report::getNetProfit());\par
00324         SalesReport salesReport(salesId++, currentTime, productNames, Report::getOperationalCosts(), Report::getNetProfit());\par
00325 \par
00326         Report::setOperationalCosts(Report::getOperationalCosts()+featureOperationalCosts);\par
00327 \par
00328         csvReport.append(warehouseReport.generateReport());\par
00329         csvReport.append(salesReport.generateReport());\par
00330     \}\par
00331 \par
00332     {\cf20 // Display the CSV report on the screen}\par
00333     std::cout << csvReport.toStdString() << std::endl;\par
00334 \par
00335     {\cf20 // Save the CSV report to a file}\par
00336     QFile csvFile({\cf22 "SimulationReport.csv"});\par
00337 \par
00338     {\cf19 if}(csvFile.open(QIODevice::Append | QIODevice::Text))\par
00339     \{\par
00340         QTextStream out(&csvFile);\par
00341         out << {\cf22 "\\n"};\par
00342         out << csvReport;\par
00343         csvFile.close();\par
00344     \}\par
00345     {\cf19 else}\par
00346     \{\par
00347         std::cerr << {\cf22 "Error while trying to write the CSV report to file."} << std::endl;\par
00348     \}\par
00349 \par
00350     {\cf19 return} csvReport;\par
00351 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/Simulation/Simulation.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/Simulation/Simulation.h}
{\xe \v src/Simulation/Simulation.h}
{\bkmkstart AAAAAAAABY}
{\bkmkend AAAAAAAABY}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Header file for the {\b Simulation} class. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <Warehouse/Warehouse.h>}\par
{\f2 #include <WarehouseReport/WarehouseReport.h>}\par
{\f2 #include <SalesReport/SalesReport.h>}\par
{\f2 #include <Event/Event.h>}\par
{\f2 #include <QList>}\par
{\f2 #include <QDateTime>}\par
{\f2 #include <QFile>}\par
{\f2 #include <QRandomGenerator>}\par
{\f2 #include <iostream>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Simulation}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The {\b Simulation} class manages the overall department store simulation. }}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Header file for the {\b Simulation} class. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Declares the {\b Simulation} class and its members, which are responsible for managing the overall department store simulation. \par
}{
Definition in file {\b Simulation.h}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Simulation.h\par \pard\plain 
{\tc\tcl2 \v src/Simulation/Simulation.h}
{\xe \v src/Simulation/Simulation.h}
{\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00008 {\cf21 #ifndef SIMULATION_H}\par
00009 {\cf21 #define SIMULATION_H}\par
00010 \par
00011 {\cf21 #include <Warehouse/Warehouse.h>}\par
00012 {\cf21 #include <WarehouseReport/WarehouseReport.h>}\par
00013 {\cf21 #include <SalesReport/SalesReport.h>}\par
00014 {\cf21 #include <Event/Event.h>}\par
00015 {\cf21 #include <QList>}\par
00016 {\cf21 #include <QDateTime>}\par
00017 {\cf21 #include <QFile>}\par
00018 {\cf21 #include <QRandomGenerator>}\par
00019 {\cf21 #include <iostream>}\par
00020 \par
00028 {\cf17 class }Simulation\par
00029 \{\par
00030 {\cf17 private}:\par
00031     {\cf18 int} currentCycle; \par
00032     {\cf18 int} seed; \par
00033     QList<Event> events; \par
00034     QDateTime currentTime; \par
00035     QList<Warehouse> Warehouses; \par
00036 \par
00037 {\cf17 public}:\par
00043     Simulation();\par
00044 \par
00051     status conductCycle();\par
00052 \par
00060     status respondToEvent(Event& event);\par
00061 \par
00067     {\cf18 void} run();\par
00068 \par
00074     {\cf18 void} processEvents();\par
00075 \par
00082     QString generateReport();\par
00083 \};\par
00084 \par
00085 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/Storage/Storage.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/Storage/Storage.cpp}
{\xe \v src/Storage/Storage.cpp}
{\bkmkstart AAAAAAAABZ}
{\bkmkend AAAAAAAABZ}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file of the {\b Storage} class. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Storage.h"}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file of the {\b Storage} class. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition in file {\b Storage.cpp}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Storage.cpp\par \pard\plain 
{\tc\tcl2 \v src/Storage/Storage.cpp}
{\xe \v src/Storage/Storage.cpp}
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00006 {\cf21 #include "Storage.h"}\par
00007 \par
00011 Storage::Storage({\cf18 int} capacity)\par
00012 \{\par
00013     {\cf17 this} -> capacity = capacity;\par
00014 \}\par
00015 \par
00019 storageStatus Storage::checkCapacity({\cf18 int} totalCapacity){\cf17  const}\par
00020 {\cf17 }\{\par
00021     {\cf19 if} (capacity == 0)\par
00022     \{\par
00023         {\cf19 return} EMPTY;\par
00024     \}\par
00025     {\cf19 else} {\cf19 if} (capacity > 0 && capacity < totalCapacity)\par
00026     \{\par
00027         {\cf19 return} AVAILABLE;\par
00028     \}\par
00029     {\cf19 else}\par
00030     \{\par
00031         {\cf19 return} FULLY;\par
00032     \}\par
00033 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/Storage/Storage.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/Storage/Storage.h}
{\xe \v src/Storage/Storage.h}
{\bkmkstart AAAAAAAACA}
{\bkmkend AAAAAAAACA}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Header file of the {\b Storage} class. }}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Storage}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The {\b Storage} class represents a storage unit with a certain capacity. }}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerations\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b storageStatus} \{ {\b EMPTY}
, {\b AVAILABLE}
, {\b FULLY}
 \}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Header file of the {\b Storage} class. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition in file {\b Storage.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumeration Type Documentation\par
\pard\plain 
{\xe \v storageStatus\:Storage.h}
{\xe \v Storage.h\:storageStatus}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b storageStatus}}}
\par
{\bkmkstart AAAAAAAACB}
{\bkmkend AAAAAAAACB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Enum representing the status of the {\b Storage} capacity. \par
}{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v EMPTY\:Storage.h}
{\xe \v Storage.h\:EMPTY}
{\qr EMPTY{\bkmkstart AAAAAAAACC}
{\bkmkend AAAAAAAACC}
\cell }{\cell }{\row }
{\xe \v AVAILABLE\:Storage.h}
{\xe \v Storage.h\:AVAILABLE}
{\qr AVAILABLE{\bkmkstart AAAAAAAACD}
{\bkmkend AAAAAAAACD}
\cell }{\cell }{\row }
{\xe \v FULLY\:Storage.h}
{\xe \v Storage.h\:FULLY}
{\qr FULLY{\bkmkstart AAAAAAAACE}
{\bkmkend AAAAAAAACE}
\cell }{\cell }{\row }
}
\par
{
Definition at line {\b 10} of file {\b Storage.h}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Storage.h\par \pard\plain 
{\tc\tcl2 \v src/Storage/Storage.h}
{\xe \v src/Storage/Storage.h}
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00006 {\cf21 #ifndef STORAGE_H}\par
00007 {\cf21 #define STORAGE_H}\par
00008 \par
00010 {\cf17 enum} storageStatus \{EMPTY, AVAILABLE, FULLY\};\par
00011 \par
00019 {\cf17 class }Storage\par
00020 \{\par
00021 {\cf17 protected}:\par
00022     {\cf18 int} capacity;    \par
00023 {\cf17 public}:\par
00029     Storage({\cf18 int} capacity);\par
00030 \par
00037     storageStatus checkCapacity({\cf18 int} totalCapacity) {\cf17 const};\par
00038 \};\par
00039 \par
00040 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/Warehouse/Warehouse.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/Warehouse/Warehouse.cpp}
{\xe \v src/Warehouse/Warehouse.cpp}
{\bkmkstart AAAAAAAACF}
{\bkmkend AAAAAAAACF}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Warehouse.h"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Warehouse.cpp\par \pard\plain 
{\tc\tcl2 \v src/Warehouse/Warehouse.cpp}
{\xe \v src/Warehouse/Warehouse.cpp}
{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00006 {\cf21 #include "Warehouse.h"}\par
00007 \par
00009 {\cf18 int} Warehouse::warehouseId = 0;\par
00010 \par
00014 Warehouse::Warehouse(QString location, {\cf18 double} warehouseCapacity) : Storage(0)\par
00015 \{\par
00016     ++warehouseId;\par
00017     this->location = location;\par
00018 \par
00019     {\cf19 if} (warehouseCapacity >= 0)\par
00020     \{\par
00021         this->warehouseCapacity = warehouseCapacity;\par
00022     \}\par
00023     {\cf19 else}\par
00024     \{\par
00025         this->warehouseCapacity = 0;\par
00026     \}\par
00027 \}\par
00028 \par
00033 storageStatus Warehouse::checkStatus()\par
00034 \{\par
00035     {\cf19 if} (warehouseCapacity == 0)\par
00036     \{\par
00037         {\cf19 return} EMPTY;\par
00038     \}\par
00039 \par
00040     {\cf18 int} sumOfProductInstances = 0;\par
00041 \par
00042     {\cf19 for} (Product& product : productList)\par
00043     \{\par
00044         sumOfProductInstances += product.getQuantity();\par
00045     \}\par
00046 \par
00047     {\cf19 if} (sumOfProductInstances == warehouseCapacity)\par
00048     \{\par
00049         {\cf19 return} FULLY;\par
00050     \}\par
00051 \par
00052     capacity = sumOfProductInstances;\par
00053 \par
00054     {\cf19 return} checkCapacity(warehouseCapacity);\par
00055 \}\par
00056 \par
00060 status Warehouse::updateStatus({\cf18 int} newCapacity)\par
00061 \{\par
00062     {\cf19 if} (newCapacity < 0)\par
00063     \{\par
00064         {\cf19 return} ERROR;\par
00065     \}\par
00066 \par
00067     {\cf18 int} sumOfProductInstances = capacity;\par
00068 \par
00069     {\cf19 if} (newCapacity >= sumOfProductInstances)\par
00070     \{\par
00071         warehouseCapacity = newCapacity;\par
00072         capacity = sumOfProductInstances;\par
00073         {\cf19 return} SUCCESS;\par
00074     \}\par
00075     {\cf19 else}\par
00076     \{\par
00077         {\cf19 return} ERROR;\par
00078     \}\par
00079 \}\par
00080 \par
00084 status Warehouse::addProduct(QString name, {\cf18 double} price, {\cf18 int} quantity, {\cf18 int} productId)\par
00085 \{\par
00086     {\cf18 int} sumOfProductInstances = capacity;\par
00087 \par
00088     {\cf19 if}(sumOfProductInstances + quantity <= warehouseCapacity && quantity >= 0 && price >= 0)\par
00089     \{\par
00090         {\cf19 for} (Product& product : productList)\par
00091         \{\par
00092             {\cf19 if} (product.productId == productId)\par
00093             \{\par
00094                 {\cf19 return} ERROR;\par
00095             \}\par
00096         \}\par
00097 \par
00098         Product newProduct(productId, name, price, quantity);\par
00099         productList.append(newProduct);\par
00100         capacity += quantity;\par
00101         {\cf19 return} SUCCESS;\par
00102     \}\par
00103     {\cf19 else}\par
00104     \{\par
00105         {\cf19 return} ERROR;\par
00106     \}\par
00107 \}\par
00108 \par
00112 status Warehouse::updatePrice({\cf18 double} newPrice, {\cf18 int} productId)\par
00113 \{\par
00114     {\cf18 bool} productFound = {\cf17 false}; \par
00115 \par
00116     {\cf19 for}(Product& product : productList)\par
00117     \{\par
00118         {\cf19 if}(product.productId == productId)\par
00119         \{\par
00120             {\cf19 return} product.updatePrice(newPrice);\par
00121         \}\par
00122     \}\par
00123 \par
00124     {\cf19 if}(productFound == {\cf17 false})\par
00125     \{\par
00126         {\cf19 return} ERROR;\par
00127     \}\par
00128 \}\par
00129 \par
00133 status Warehouse::changeQuantity({\cf18 int} quantity, {\cf18 int} productId)\par
00134 \{\par
00135     {\cf18 int} sumOfProductInstances = capacity;\par
00136 \par
00137     {\cf19 for}(Product& product : productList)\par
00138     \{\par
00139         {\cf19 if}(product.productId == productId)\par
00140         \{\par
00141             {\cf18 int} currentQuantity = product.getQuantity();\par
00142 \par
00143             {\cf19 if}(sumOfProductInstances - currentQuantity + quantity <= warehouseCapacity)\par
00144             \{\par
00145                 status Status = product.changeQuantity(quantity);\par
00146 \par
00147                 {\cf19 if}(Status == SUCCESS)\par
00148                 \{\par
00149                     capacity = sumOfProductInstances - currentQuantity + quantity;\par
00150                     {\cf19 return} SUCCESS;\par
00151                 \}\par
00152                 {\cf19 else}\par
00153                 \{\par
00154                     {\cf19 return} ERROR;\par
00155                 \}\par
00156             \}\par
00157             {\cf19 else}\par
00158             \{\par
00159                 {\cf19 return} ERROR;\par
00160             \}\par
00161         \}\par
00162     \}\par
00163     {\cf19 return} ERROR;\par
00164 \}\par
00165 \par
00169 status Warehouse::sell({\cf18 int} quantityToSell, {\cf18 int} productId)\par
00170 \{\par
00171     {\cf19 for}(Product& product : productList)\par
00172     \{\par
00173         {\cf19 if}(product.productId == productId)\par
00174         \{\par
00175             {\cf19 return} product.sell(quantityToSell);\par
00176         \}\par
00177     \}\par
00178     {\cf19 return} ERROR;\par
00179 \}\par
00180 \par
00184 QString Warehouse::getName({\cf18 int} productId)\par
00185 \{\par
00186     {\cf18 bool} productFound = {\cf17 false}; \par
00187 \par
00188     {\cf19 for}(Product& product : productList)\par
00189     \{\par
00190         {\cf19 if}(product.productId == productId)\par
00191         \{\par
00192             {\cf19 return} product.getName();\par
00193         \}\par
00194     \}\par
00195 \par
00196     {\cf19 if}(productFound == {\cf17 false})\par
00197     \{\par
00198         {\cf19 return} {\cf22 "ERROR"};\par
00199     \}\par
00200 \}\par
00201 \par
00205 {\cf18 double} Warehouse::getPrice({\cf18 int} productId)\par
00206 \{\par
00207     {\cf18 bool} productFound = {\cf17 false}; \par
00208 \par
00209     {\cf19 for}(Product& product : productList)\par
00210     \{\par
00211         {\cf19 if}(product.productId == productId)\par
00212         \{\par
00213             {\cf19 return} product.getPrice();\par
00214         \}\par
00215     \}\par
00216 \par
00217     {\cf19 if}(productFound == {\cf17 false})\par
00218     \{\par
00219         {\cf19 return} -1;\par
00220     \}\par
00221 \}\par
00222 \par
00226 {\cf18 int} Warehouse::getQuantity({\cf18 int} productId)\par
00227 \{\par
00228     {\cf18 bool} productFound = {\cf17 false}; \par
00229 \par
00230     {\cf19 for}(Product& product : productList)\par
00231     \{\par
00232         {\cf19 if}(product.productId == productId)\par
00233         \{\par
00234             {\cf19 return} product.getQuantity();\par
00235         \}\par
00236     \}\par
00237 \par
00238     {\cf19 if}(productFound == {\cf17 false})\par
00239     \{\par
00240         {\cf19 return} -1;\par
00241     \}\par
00242 \}\par
00243 \par
00247 QString Warehouse::getLocation(){\cf17  const}\par
00248 {\cf17 }\{\par
00249     {\cf19 return} location;\par
00250 \}\par
00251 \par
00255 QList<Product> Warehouse::getProductList(){\cf17  const}\par
00256 {\cf17 }\{\par
00257     {\cf19 return} productList;\par
00258 \}\par
00259 \par
00263 {\cf18 double} Warehouse::getCurrentCapacity(){\cf17  const}\par
00264 {\cf17 }\{\par
00265     {\cf19 return} warehouseCapacity;\par
00266 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/Warehouse/Warehouse.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/Warehouse/Warehouse.h}
{\xe \v src/Warehouse/Warehouse.h}
{\bkmkstart AAAAAAAACG}
{\bkmkend AAAAAAAACG}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file of the {\b Warehouse} class. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Storage/Storage.h"}\par
{\f2 #include "Product/Product.h"}\par
{\f2 #include <QList>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Warehouse}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The {\b Warehouse} class represents a warehouse with storage capacity. }}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file of the {\b Warehouse} class. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Header file of the {\b Warehouse} class.\par
}{
Definition in file {\b Warehouse.h}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Warehouse.h\par \pard\plain 
{\tc\tcl2 \v src/Warehouse/Warehouse.h}
{\xe \v src/Warehouse/Warehouse.h}
{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00006 {\cf21 #ifndef WAREHOUSE_H}\par
00007 {\cf21 #define WAREHOUSE_H}\par
00008 \par
00009 {\cf21 #include "Storage/Storage.h"}\par
00010 {\cf21 #include "Product/Product.h"}\par
00011 {\cf21 #include <QList>}\par
00012 \par
00020 {\cf17 class }Warehouse : Storage\par
00021 \{\par
00022 {\cf17 private}:\par
00023     QString location;   \par
00024     QList<Product> productList;     \par
00025     {\cf18 double} warehouseCapacity;   \par
00026 {\cf17 public}:\par
00033     Warehouse(QString location, {\cf18 double} warehouseCapacity);\par
00034 \par
00035     {\cf17 static} {\cf18 int} warehouseId;    \par
00036 \par
00043     storageStatus checkStatus();\par
00044 \par
00051     status updateStatus({\cf18 int} newCapacity);\par
00052 \par
00053     {\cf20 // Product operations}\par
00054 \par
00064     status addProduct(QString name, {\cf18 double} price, {\cf18 int} quantity, {\cf18 int} productId);\par
00065 \par
00073     status updatePrice({\cf18 double} newPrice, {\cf18 int} productId);\par
00074 \par
00082     status changeQuantity({\cf18 int} quantity, {\cf18 int} productId);\par
00083 \par
00091     status sell({\cf18 int} quantityToSell, {\cf18 int} productId);\par
00092 \par
00099     QString getName({\cf18 int} productId);\par
00100 \par
00107     {\cf18 double} getPrice({\cf18 int} productId);\par
00108 \par
00115     {\cf18 int} getQuantity({\cf18 int} productId);\par
00116 \par
00117 \par
00118 \par
00119     {\cf20 //Getters}\par
00120     QString getLocation() {\cf17 const};      \par
00121     QList<Product> getProductList() {\cf17 const};     \par
00122     {\cf18 double} getCurrentCapacity() {\cf17 const};         \par
00123 \};\par
00124 \par
00125 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/WarehouseReport/WarehouseReport.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v src/WarehouseReport/WarehouseReport.cpp}
{\xe \v src/WarehouseReport/WarehouseReport.cpp}
{\bkmkstart AAAAAAAACH}
{\bkmkend AAAAAAAACH}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file of the {\b WarehouseReport} class. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "WarehouseReport.h"}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file of the {\b WarehouseReport} class. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition in file {\b WarehouseReport.cpp}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
WarehouseReport.cpp\par \pard\plain 
{\tc\tcl2 \v src/WarehouseReport/WarehouseReport.cpp}
{\xe \v src/WarehouseReport/WarehouseReport.cpp}
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00006 {\cf21 #include "WarehouseReport.h"}\par
00007 \par
00011 WarehouseReport::WarehouseReport({\cf18 int} warehouseId, {\cf18 double} capacity, QList<ProductReport> productList, {\cf18 double} operationalCosts, {\cf18 double} netProfit) : Report(operationalCosts, netProfit)\par
00012 \{\par
00013     {\cf17 this} -> warehouseId = warehouseId;\par
00014     {\cf17 this} -> capacity = capacity;\par
00015     {\cf17 this} -> productList = productList;\par
00016 \}\par
00017 \par
00021 QString WarehouseReport::generateReport(){\cf17  const}\par
00022 {\cf17 }\{\par
00023     QString report;\par
00024     report += QString({\cf22 "Warehouse ID,Capacity\\n%1,%2\\n"})\par
00025                   .arg(warehouseId)\par
00026                   .arg(capacity);\par
00027 \par
00028     report += {\cf22 "Product Name,Price,Quantity\\n"};\par
00029     {\cf19 for}({\cf17 const} ProductReport& product : productList)\par
00030     \{\par
00031         report += QString({\cf22 "%1,%2,%3\\n"})\par
00032                       .arg(product.name)\par
00033                       .arg(product.price)\par
00034                       .arg(product.quantity);\par
00035     \}\par
00036 \par
00037     {\cf19 return} report;\par
00038 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/WarehouseReport/WarehouseReport.h File Reference\par \pard\plain 
{\tc\tcl2 \v src/WarehouseReport/WarehouseReport.h}
{\xe \v src/WarehouseReport/WarehouseReport.h}
{\bkmkstart AAAAAAAACI}
{\bkmkend AAAAAAAACI}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Header file of the {\b WarehouseReport} class. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <Report/Report.h>}\par
{\f2 #include <QList>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b WarehouseReport}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The {\b WarehouseReport} class extends the {\b Report} class to provide a report specifically for warehouse inventory. }}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Header file of the {\b WarehouseReport} class. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition in file {\b WarehouseReport.h}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
WarehouseReport.h\par \pard\plain 
{\tc\tcl2 \v src/WarehouseReport/WarehouseReport.h}
{\xe \v src/WarehouseReport/WarehouseReport.h}
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00006 {\cf21 #ifndef WAREHOUSEREPORT_H}\par
00007 {\cf21 #define WAREHOUSEREPORT_H}\par
00008 \par
00009 {\cf21 #include <Report/Report.h>}\par
00010 {\cf21 #include <QList>}\par
00011 \par
00019 {\cf17 class }WarehouseReport : Report\par
00020 \{\par
00021 {\cf17 private}:\par
00022     {\cf18 int} warehouseId; \par
00023     {\cf18 double} capacity; \par
00024     QList<ProductReport> productList; \par
00025 \par
00026 {\cf17 public}:\par
00036     WarehouseReport({\cf18 int} warehouseId, {\cf18 double} capacity, QList<ProductReport> productList, {\cf18 double} operationalCosts, {\cf18 double} netProfit);\par
00037 \par
00042     QString generateReport() {\cf17 const};\par
00043 \};\par
00044 \par
00045 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test/Event/EventTest.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v test/Event/EventTest.cpp}
{\xe \v test/Event/EventTest.cpp}
{\bkmkstart AAAAAAAACJ}
{\bkmkend AAAAAAAACJ}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file of tests for the {\b Event} class. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <gtest/gtest.h>}\par
{\f2 #include "Event/Event.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (EventTest, itLives)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to ensure that a {\b Event} object can be instantiated. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (EventTest, generateEventShouldReturnCorrectValue)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that the method generates a valid event. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file of tests for the {\b Event} class. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition in file {\b EventTest.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v TEST\:EventTest.cpp}
{\xe \v EventTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (EventTest , generateEventShouldReturnCorrectValue )}}
\par
{\bkmkstart AAAAAAAACK}
{\bkmkend AAAAAAAACK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that the method generates a valid event. }}\par
{
Definition at line {\b 20} of file {\b EventTest.cpp}.}\par
}
{\xe \v TEST\:EventTest.cpp}
{\xe \v EventTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (EventTest , itLives )}}
\par
{\bkmkstart AAAAAAAACL}
{\bkmkend AAAAAAAACL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to ensure that a {\b Event} object can be instantiated. }}\par
{
Definition at line {\b 12} of file {\b EventTest.cpp}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
EventTest.cpp\par \pard\plain 
{\tc\tcl2 \v test/Event/EventTest.cpp}
{\xe \v test/Event/EventTest.cpp}
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00006 {\cf21 #include <gtest/gtest.h>}\par
00007 {\cf21 #include "Event/Event.h"}\par
00008 \par
00012 TEST(EventTest, itLives)\par
00013 \{\par
00014     Event event({\cf22 "Init"}, QDateTime::currentDateTime());\par
00015 \}\par
00016 \par
00020 TEST(EventTest, generateEventShouldReturnCorrectValue)\par
00021 \{\par
00022     Event {\cf17 event} = Event::generateEvent({\cf22 "Init"}, 100);\par
00023 \par
00024     EXPECT_FALSE(event.getEventType().isEmpty());\par
00025     EXPECT_TRUE(event.getTime() > QDateTime::currentDateTime());\par
00026 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test/Product/ProductTest.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v test/Product/ProductTest.cpp}
{\xe \v test/Product/ProductTest.cpp}
{\bkmkstart AAAAAAAACM}
{\bkmkend AAAAAAAACM}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file of tests for the {\b Product} class. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <gtest/gtest.h>}\par
{\f2 #include "Product/Product.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (ProductTest, itLives)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to ensure that a {\b Product} object can be instantiated. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (ProductTest, getNameShouldReturnName)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that getName() returns the correct product name. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (ProductTest, getQuantityShouldReturnInt)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that getQuantity() returns the correct quantity. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (ProductTest, getPriceShouldReturnDouble)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that getPrice() returns the correct price. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (ProductTest, sellShouldReturnSuccess)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that sell() returns SUCCESS when selling a valid quantity. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (ProductTest, sellShouldReturnError)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that sell() returns ERROR when selling an invalid quantity. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (ProductTest, updatePriceShouldReturnSuccess)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that updatePrice() returns SUCCESS when given a valid price. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (ProductTest, updatePriceShouldReturnError)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that updatePrice() returns ERROR when given an invalid price. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (ProductTest, changeQuantityShouldReturnSuccess)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that changeQuantity() returns SUCCESS when given a valid quantity. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (ProductTest, changeQuantityShouldReturnError)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that changeQuantity() returns ERROR when given an invalid quantity. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file of tests for the {\b Product} class. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition in file {\b ProductTest.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v TEST\:ProductTest.cpp}
{\xe \v ProductTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (ProductTest , changeQuantityShouldReturnError )}}
\par
{\bkmkstart AAAAAAAACN}
{\bkmkend AAAAAAAACN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that changeQuantity() returns ERROR when given an invalid quantity. }}\par
{
Definition at line {\b 110} of file {\b ProductTest.cpp}.}\par
}
{\xe \v TEST\:ProductTest.cpp}
{\xe \v ProductTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (ProductTest , changeQuantityShouldReturnSuccess )}}
\par
{\bkmkstart AAAAAAAACO}
{\bkmkend AAAAAAAACO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that changeQuantity() returns SUCCESS when given a valid quantity. }}\par
{
Definition at line {\b 99} of file {\b ProductTest.cpp}.}\par
}
{\xe \v TEST\:ProductTest.cpp}
{\xe \v ProductTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (ProductTest , getNameShouldReturnName )}}
\par
{\bkmkstart AAAAAAAACP}
{\bkmkend AAAAAAAACP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that getName() returns the correct product name. }}\par
{
Definition at line {\b 20} of file {\b ProductTest.cpp}.}\par
}
{\xe \v TEST\:ProductTest.cpp}
{\xe \v ProductTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (ProductTest , getPriceShouldReturnDouble )}}
\par
{\bkmkstart AAAAAAAACQ}
{\bkmkend AAAAAAAACQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that getPrice() returns the correct price. }}\par
{
Definition at line {\b 38} of file {\b ProductTest.cpp}.}\par
}
{\xe \v TEST\:ProductTest.cpp}
{\xe \v ProductTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (ProductTest , getQuantityShouldReturnInt )}}
\par
{\bkmkstart AAAAAAAACR}
{\bkmkend AAAAAAAACR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that getQuantity() returns the correct quantity. }}\par
{
Definition at line {\b 29} of file {\b ProductTest.cpp}.}\par
}
{\xe \v TEST\:ProductTest.cpp}
{\xe \v ProductTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (ProductTest , itLives )}}
\par
{\bkmkstart AAAAAAAACS}
{\bkmkend AAAAAAAACS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to ensure that a {\b Product} object can be instantiated. }}\par
{
Definition at line {\b 12} of file {\b ProductTest.cpp}.}\par
}
{\xe \v TEST\:ProductTest.cpp}
{\xe \v ProductTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (ProductTest , sellShouldReturnError )}}
\par
{\bkmkstart AAAAAAAACT}
{\bkmkend AAAAAAAACT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that sell() returns ERROR when selling an invalid quantity. }}\par
{
Definition at line {\b 60} of file {\b ProductTest.cpp}.}\par
}
{\xe \v TEST\:ProductTest.cpp}
{\xe \v ProductTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (ProductTest , sellShouldReturnSuccess )}}
\par
{\bkmkstart AAAAAAAACU}
{\bkmkend AAAAAAAACU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that sell() returns SUCCESS when selling a valid quantity. }}\par
{
Definition at line {\b 47} of file {\b ProductTest.cpp}.}\par
}
{\xe \v TEST\:ProductTest.cpp}
{\xe \v ProductTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (ProductTest , updatePriceShouldReturnError )}}
\par
{\bkmkstart AAAAAAAACV}
{\bkmkend AAAAAAAACV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that updatePrice() returns ERROR when given an invalid price. }}\par
{
Definition at line {\b 86} of file {\b ProductTest.cpp}.}\par
}
{\xe \v TEST\:ProductTest.cpp}
{\xe \v ProductTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (ProductTest , updatePriceShouldReturnSuccess )}}
\par
{\bkmkstart AAAAAAAACW}
{\bkmkend AAAAAAAACW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that updatePrice() returns SUCCESS when given a valid price. }}\par
{
Definition at line {\b 73} of file {\b ProductTest.cpp}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ProductTest.cpp\par \pard\plain 
{\tc\tcl2 \v test/Product/ProductTest.cpp}
{\xe \v test/Product/ProductTest.cpp}
{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00006 {\cf21 #include <gtest/gtest.h>}\par
00007 {\cf21 #include "Product/Product.h"}\par
00008 \par
00012 TEST(ProductTest, itLives)\par
00013 \{\par
00014     Product(0, QString::fromStdString({\cf22 "Lorem Ipsum"}), 1.00, 1);\par
00015 \}\par
00016 \par
00020 TEST(ProductTest, getNameShouldReturnName)\par
00021 \{\par
00022     Product product = Product(0, QString::fromStdString({\cf22 "Lorem Ipsum"}), 1.00, 1);\par
00023     EXPECT_EQ(product.getName(),QString::fromStdString({\cf22 "Lorem Ipsum"}));\par
00024 \}\par
00025 \par
00029 TEST(ProductTest, getQuantityShouldReturnInt)\par
00030 \{\par
00031     Product product = Product(0, QString::fromStdString({\cf22 "Lorem Ipsum"}), 1.00, 1);\par
00032     EXPECT_EQ(product.getQuantity(),1);\par
00033 \}\par
00034 \par
00038 TEST(ProductTest, getPriceShouldReturnDouble)\par
00039 \{\par
00040     Product product = Product(0, QString::fromStdString({\cf22 "Lorem Ipsum"}), 1.00, 1);\par
00041     EXPECT_EQ(product.getPrice(),1.00);\par
00042 \}\par
00043 \par
00047 TEST(ProductTest, sellShouldReturnSuccess)\par
00048 \{\par
00049     Product product = Product(0, QString::fromStdString({\cf22 "Lorem Ipsum"}), 1.00, 1);\par
00050     Product product2 = Product(1, QString::fromStdString({\cf22 "Ipsum Lorem"}), 23.99, 56);\par
00051     EXPECT_EQ(product.sell(1),SUCCESS);\par
00052     EXPECT_EQ(product2.sell(1),SUCCESS);\par
00053     EXPECT_EQ(product2.sell(53),SUCCESS);\par
00054     EXPECT_EQ(product2.sell(2),SUCCESS);\par
00055 \}\par
00056 \par
00060 TEST(ProductTest, sellShouldReturnError)\par
00061 \{\par
00062     Product product = Product(0, QString::fromStdString({\cf22 "Lorem Ipsum"}), 1.00, 0);\par
00063     Product product2 = Product(1, QString::fromStdString({\cf22 "Ipsum Lorem"}), 23.99, 1);\par
00064     EXPECT_EQ(product.sell(1),ERROR);\par
00065     EXPECT_EQ(product.sell(-1),ERROR);\par
00066     EXPECT_EQ(product2.sell(2),ERROR);\par
00067     EXPECT_EQ(product2.sell(-1),ERROR);\par
00068 \}\par
00069 \par
00073 TEST(ProductTest, updatePriceShouldReturnSuccess)\par
00074 \{\par
00075     Product product = Product(0, QString::fromStdString({\cf22 "Lorem Ipsum"}), 1.00, 0);\par
00076     EXPECT_EQ(product.updatePrice(1.00),SUCCESS);\par
00077     EXPECT_EQ(product.updatePrice(59.99),SUCCESS);\par
00078     EXPECT_EQ(product.updatePrice(545454),SUCCESS);\par
00079     EXPECT_EQ(product.updatePrice(1),SUCCESS);\par
00080     EXPECT_EQ(product.updatePrice(0.01),SUCCESS);\par
00081 \}\par
00082 \par
00086 TEST(ProductTest, updatePriceShouldReturnError)\par
00087 \{\par
00088     Product product = Product(0, QString::fromStdString({\cf22 "Lorem Ipsum"}), 1.00, 0);\par
00089     EXPECT_EQ(product.updatePrice(-1.00),ERROR);\par
00090     EXPECT_EQ(product.updatePrice(-59.99),ERROR);\par
00091     EXPECT_EQ(product.updatePrice(-545454),ERROR);\par
00092     EXPECT_EQ(product.updatePrice(-1),ERROR);\par
00093     EXPECT_EQ(product.updatePrice(-0.01),ERROR);\par
00094 \}\par
00095 \par
00099 TEST(ProductTest, changeQuantityShouldReturnSuccess)\par
00100 \{\par
00101     Product product = Product(0, QString::fromStdString({\cf22 "Lorem Ipsum"}), 1.00, 3);\par
00102     EXPECT_EQ(product.changeQuantity(1),SUCCESS);\par
00103     EXPECT_EQ(product.changeQuantity(59),SUCCESS);\par
00104     EXPECT_EQ(product.changeQuantity(545454),SUCCESS);\par
00105 \}\par
00106 \par
00110 TEST(ProductTest, changeQuantityShouldReturnError)\par
00111 \{\par
00112     Product product = Product(0, QString::fromStdString({\cf22 "Lorem Ipsum"}), 1.00, 3);\par
00113     EXPECT_EQ(product.changeQuantity(-1),ERROR);\par
00114     EXPECT_EQ(product.changeQuantity(-59),ERROR);\par
00115     EXPECT_EQ(product.changeQuantity(-545454),ERROR);\par
00116 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test/Report/ReportTest.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v test/Report/ReportTest.cpp}
{\xe \v test/Report/ReportTest.cpp}
{\bkmkstart AAAAAAAACX}
{\bkmkend AAAAAAAACX}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file of tests for the {\b Report} class. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <gtest/gtest.h>}\par
{\f2 #include "Report/Report.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (ReportTest, generateReportShouldReturnNonEmptyString)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to ensure that the generateReport method does not return an empty string. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (ReportTest, GenerateReportShouldReturnExpectedFormat)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to ensure that the generateReport method returns a string in the expected format. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file of tests for the {\b Report} class. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition in file {\b ReportTest.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v TEST\:ReportTest.cpp}
{\xe \v ReportTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (ReportTest , GenerateReportShouldReturnExpectedFormat )}}
\par
{\bkmkstart AAAAAAAACY}
{\bkmkend AAAAAAAACY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to ensure that the generateReport method returns a string in the expected format. }}\par
{
Definition at line {\b 24} of file {\b ReportTest.cpp}.}\par
}
{\xe \v TEST\:ReportTest.cpp}
{\xe \v ReportTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (ReportTest , generateReportShouldReturnNonEmptyString )}}
\par
{\bkmkstart AAAAAAAACZ}
{\bkmkend AAAAAAAACZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to ensure that the generateReport method does not return an empty string. }}\par
{
Definition at line {\b 12} of file {\b ReportTest.cpp}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ReportTest.cpp\par \pard\plain 
{\tc\tcl2 \v test/Report/ReportTest.cpp}
{\xe \v test/Report/ReportTest.cpp}
{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00006 {\cf21 #include <gtest/gtest.h>}\par
00007 {\cf21 #include "Report/Report.h"}\par
00008 \par
00012 TEST(ReportTest, generateReportShouldReturnNonEmptyString)\par
00013 \{\par
00014     Report report(1000.0, 500.0);\par
00015 \par
00016     QString reportString = report.generateReport();\par
00017 \par
00018     EXPECT_FALSE(reportString.isEmpty());\par
00019 \}\par
00020 \par
00024 TEST(ReportTest, GenerateReportShouldReturnExpectedFormat)\par
00025 \{\par
00026     Report report(1000.0, 500.0);\par
00027 \par
00028     QString reportString = report.generateReport();\par
00029 \par
00030     EXPECT_TRUE(reportString.contains({\cf22 "Operational Costs"}));\par
00031     EXPECT_TRUE(reportString.contains({\cf22 "Net Profit"}));\par
00032 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test/SalesReport/SalesReportTest.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v test/SalesReport/SalesReportTest.cpp}
{\xe \v test/SalesReport/SalesReportTest.cpp}
{\bkmkstart AAAAAAAADA}
{\bkmkend AAAAAAAADA}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file of tests for the {\b SalesReport} class. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <gtest/gtest.h>}\par
{\f2 #include "SalesReport/SalesReport.h"}\par
{\f2 #include <QDateTime>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (SalesReportTest, itLives)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test case to ensure that a {\b SalesReport} object can be instantiated. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (SalesReportTest, generateReportShouldReturnCorrectValue)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test case to verify that the {\b SalesReport::generateReport} method returns the correct CSV format. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file of tests for the {\b SalesReport} class. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition in file {\b SalesReportTest.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v TEST\:SalesReportTest.cpp}
{\xe \v SalesReportTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (SalesReportTest , generateReportShouldReturnCorrectValue )}}
\par
{\bkmkstart AAAAAAAADB}
{\bkmkend AAAAAAAADB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test case to verify that the {\b SalesReport::generateReport} method returns the correct CSV format. }}\par
{
Definition at line {\b 27} of file {\b SalesReportTest.cpp}.}\par
}
{\xe \v TEST\:SalesReportTest.cpp}
{\xe \v SalesReportTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (SalesReportTest , itLives )}}
\par
{\bkmkstart AAAAAAAADC}
{\bkmkend AAAAAAAADC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test case to ensure that a {\b SalesReport} object can be instantiated. }}\par
{
Definition at line {\b 13} of file {\b SalesReportTest.cpp}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SalesReportTest.cpp\par \pard\plain 
{\tc\tcl2 \v test/SalesReport/SalesReportTest.cpp}
{\xe \v test/SalesReport/SalesReportTest.cpp}
{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00006 {\cf21 #include <gtest/gtest.h>}\par
00007 {\cf21 #include "SalesReport/SalesReport.h"}\par
00008 {\cf21 #include <QDateTime>}\par
00009 \par
00013 TEST(SalesReportTest, itLives)\par
00014 \{\par
00015     QDateTime time = QDateTime::currentDateTime();\par
00016     QList<Report::ProductReport> productList;\par
00017     {\cf18 double} operationalCosts = 5000.0;\par
00018     {\cf18 double} netProfit = 10000.0;\par
00019     {\cf18 int} salesId = 1;\par
00020 \par
00021     SalesReport salesReport(salesId, time, productList, operationalCosts, netProfit);\par
00022 \}\par
00023 \par
00027 TEST(SalesReportTest, generateReportShouldReturnCorrectValue)\par
00028 \{\par
00029     QDateTime time = QDateTime::currentDateTime();\par
00030     QList<Report::ProductReport> productList =\par
00031         \{\par
00032             \{{\cf22 "Product1"}, 10.0, 5\},\par
00033             \{{\cf22 "Product2"}, 20.0, 3\}\par
00034         \};\par
00035 \par
00036     {\cf18 double} operationalCosts = 5000.0;\par
00037     {\cf18 double} netProfit = 10000.0;\par
00038     {\cf18 int} salesId = 1;\par
00039 \par
00040     SalesReport report(salesId, time, productList, operationalCosts, netProfit);\par
00041     QString generatedCSV = report.generateReport();\par
00042 \par
00043     QString expectedCSVStart = QString({\cf22 "Sales ID,Time\\n%1,%2\\n"}).arg(salesId).arg(time.toString({\cf22 "yyyy-MM-dd hh:mm:ss"}));\par
00044     ASSERT_TRUE(generatedCSV.startsWith(expectedCSVStart));\par
00045 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test/Simulation/SimulationTest.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v test/Simulation/SimulationTest.cpp}
{\xe \v test/Simulation/SimulationTest.cpp}
{\bkmkstart AAAAAAAADD}
{\bkmkend AAAAAAAADD}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file of tests for the {\b Simulation} class. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <gtest/gtest.h>}\par
{\f2 #include "Simulation/Simulation.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (SimulationTest, itLives)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to ensure that the constructor initializes the current time correctly. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (SimulationTest, processEvents)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to validate the processEvents method. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (SimulationTest, conductCycle)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to check if the conductCycle method processes the simulation cycle successfully. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (SimulationTest, generateReport)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to ensure that the generateReport method produces a report. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file of tests for the {\b Simulation} class. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition in file {\b SimulationTest.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v TEST\:SimulationTest.cpp}
{\xe \v SimulationTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (SimulationTest , conductCycle )}}
\par
{\bkmkstart AAAAAAAADE}
{\bkmkend AAAAAAAADE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to check if the conductCycle method processes the simulation cycle successfully. }}\par
{
Definition at line {\b 29} of file {\b SimulationTest.cpp}.}\par
}
{\xe \v TEST\:SimulationTest.cpp}
{\xe \v SimulationTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (SimulationTest , generateReport )}}
\par
{\bkmkstart AAAAAAAADF}
{\bkmkend AAAAAAAADF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to ensure that the generateReport method produces a report. }}\par
{
Definition at line {\b 39} of file {\b SimulationTest.cpp}.}\par
}
{\xe \v TEST\:SimulationTest.cpp}
{\xe \v SimulationTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (SimulationTest , itLives )}}
\par
{\bkmkstart AAAAAAAADG}
{\bkmkend AAAAAAAADG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to ensure that the constructor initializes the current time correctly. }}\par
{
Definition at line {\b 12} of file {\b SimulationTest.cpp}.}\par
}
{\xe \v TEST\:SimulationTest.cpp}
{\xe \v SimulationTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (SimulationTest , processEvents )}}
\par
{\bkmkstart AAAAAAAADH}
{\bkmkend AAAAAAAADH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to validate the processEvents method. }}\par
{
Definition at line {\b 20} of file {\b SimulationTest.cpp}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SimulationTest.cpp\par \pard\plain 
{\tc\tcl2 \v test/Simulation/SimulationTest.cpp}
{\xe \v test/Simulation/SimulationTest.cpp}
{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00006 {\cf21 #include <gtest/gtest.h>}\par
00007 {\cf21 #include "Simulation/Simulation.h"}\par
00008 \par
00012 TEST(SimulationTest, itLives)\par
00013 \{\par
00014     Simulation simulation = Simulation();\par
00015 \}\par
00016 \par
00020 TEST(SimulationTest, processEvents)\par
00021 \{\par
00022     Simulation simulation;\par
00023     simulation.processEvents();\par
00024 \}\par
00025 \par
00029 TEST(SimulationTest, conductCycle)\par
00030 \{\par
00031     Simulation simulation;\par
00032     status result = simulation.conductCycle();\par
00033     ASSERT_EQ(result, SUCCESS);\par
00034 \}\par
00035 \par
00039 TEST(SimulationTest, generateReport)\par
00040 \{\par
00041     Simulation simulation;\par
00042     QString report = simulation.generateReport();\par
00043     ASSERT_TRUE(report.contains({\cf22 "Warehouse ID,"}));\par
00044     ASSERT_TRUE(report.contains({\cf22 "Capacity"}));\par
00045     ASSERT_TRUE(report.contains({\cf22 "Product Name,Price,Quantity"}));\par
00046 \}\par
00047 \par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test/Storage/StorageTest.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v test/Storage/StorageTest.cpp}
{\xe \v test/Storage/StorageTest.cpp}
{\bkmkstart AAAAAAAADI}
{\bkmkend AAAAAAAADI}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file of tests for the {\b Storage} class. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <gtest/gtest.h>}\par
{\f2 #include "Storage/Storage.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (StorageTest, itLives)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to ensure that a {\b Storage} object can be instantiated. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (StorageTest, checkCapacityShouldReturnEmpty)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that a new {\b Storage} is EMPTY when initialized with zero capacity. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (StorageTest, checkCapacityShouldReturnAvailable)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that {\b Storage} is AVAILABLE when initialized with capacity less than total capacity. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (StorageTest, checkCapacityShouldReturnFully)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that {\b Storage} is FULLY when initialized with capacity equal to or greater than total capacity. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file of tests for the {\b Storage} class. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition in file {\b StorageTest.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v TEST\:StorageTest.cpp}
{\xe \v StorageTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (StorageTest , checkCapacityShouldReturnAvailable )}}
\par
{\bkmkstart AAAAAAAADJ}
{\bkmkend AAAAAAAADJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that {\b Storage} is AVAILABLE when initialized with capacity less than total capacity. }}\par
{
Definition at line {\b 29} of file {\b StorageTest.cpp}.}\par
}
{\xe \v TEST\:StorageTest.cpp}
{\xe \v StorageTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (StorageTest , checkCapacityShouldReturnEmpty )}}
\par
{\bkmkstart AAAAAAAADK}
{\bkmkend AAAAAAAADK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that a new {\b Storage} is EMPTY when initialized with zero capacity. }}\par
{
Definition at line {\b 20} of file {\b StorageTest.cpp}.}\par
}
{\xe \v TEST\:StorageTest.cpp}
{\xe \v StorageTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (StorageTest , checkCapacityShouldReturnFully )}}
\par
{\bkmkstart AAAAAAAADL}
{\bkmkend AAAAAAAADL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that {\b Storage} is FULLY when initialized with capacity equal to or greater than total capacity. }}\par
{
Definition at line {\b 38} of file {\b StorageTest.cpp}.}\par
}
{\xe \v TEST\:StorageTest.cpp}
{\xe \v StorageTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (StorageTest , itLives )}}
\par
{\bkmkstart AAAAAAAADM}
{\bkmkend AAAAAAAADM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to ensure that a {\b Storage} object can be instantiated. }}\par
{
Definition at line {\b 12} of file {\b StorageTest.cpp}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
StorageTest.cpp\par \pard\plain 
{\tc\tcl2 \v test/Storage/StorageTest.cpp}
{\xe \v test/Storage/StorageTest.cpp}
{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00006 {\cf21 #include <gtest/gtest.h>}\par
00007 {\cf21 #include "Storage/Storage.h"}\par
00008 \par
00012 TEST(StorageTest, itLives)\par
00013 \{\par
00014     Storage(0);\par
00015 \}\par
00016 \par
00020 TEST(StorageTest, checkCapacityShouldReturnEmpty)\par
00021 \{\par
00022     Storage storage(0);\par
00023     EXPECT_EQ(storage.checkCapacity(100), EMPTY);\par
00024 \}\par
00025 \par
00029 TEST(StorageTest, checkCapacityShouldReturnAvailable)\par
00030 \{\par
00031     Storage storage(10);\par
00032     EXPECT_EQ(storage.checkCapacity(100), AVAILABLE);\par
00033 \}\par
00034 \par
00038 TEST(StorageTest, checkCapacityShouldReturnFully)\par
00039 \{\par
00040     Storage storage(100);\par
00041     EXPECT_EQ(storage.checkCapacity(100), FULLY);\par
00042 \par
00043     Storage storage2(150);\par
00044     EXPECT_EQ(storage2.checkCapacity(100), FULLY);\par
00045 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test/Warehouse/WarehouseTest.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v test/Warehouse/WarehouseTest.cpp}
{\xe \v test/Warehouse/WarehouseTest.cpp}
{\bkmkstart AAAAAAAADN}
{\bkmkend AAAAAAAADN}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file of tests for the {\b Warehouse} class. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <gtest/gtest.h>}\par
{\f2 #include "Product/Product.h"}\par
{\f2 #include "Warehouse/Warehouse.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (WarehouseTest, itLives)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to ensure that a {\b Warehouse} object can be instantiated. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (WarehouseTest, checkStatusShouldReturnEmpty)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to check if the warehouse status is EMPTY when capacity is zero or after products are removed. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (WarehouseTest, checkStatusShouldReturnFully)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to check if the warehouse status is FULLY when capacity is full or exceeded. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (WarehouseTest, checkStatusShouldReturnAvailable)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to check if the warehouse status is AVAILABLE when capacity is not full. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (WarehouseTest, updateStatusShouldReturnSuccess)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that updateStatus successfully updates the warehouse's capacity. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (WarehouseTest, updateStatusShouldReturnError)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that updateStatus returns an error when given a negative capacity. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (WarehouseTest, changeQuantityShouldReturnSuccess)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that changeQuantity successfully changes the quantity of a product. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (WarehouseTest, changeQuantityShouldReturnError)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that changeQuantity returns an error when given a negative quantity. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (WarehouseTest, sellShouldReturnSuccess)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that sell successfully sells the product and decreases the quantity. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (WarehouseTest, sellShouldReturnError)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that sell returns an error when trying to sell more than available quantity. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (WarehouseTest, updatePriceShouldReturnSuccess)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that updatePrice successfully updates the price of a product. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (WarehouseTest, updatePriceShouldReturnError)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that updatePrice returns an error when given a negative price. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (WarehouseTest, addProductShouldReturnSuccess)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that addProduct successfully adds a product to the warehouse. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (WarehouseTest, addProductShouldReturnError)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that addProduct returns an error when given a negative price or quantity. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (WarehouseTest, getLocationShouldReturnCorrectValue)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that getLocation returns the correct location of the warehouse. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (WarehouseTest, getProductListShouldReturnCorrectValue)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that getProductList returns the correct list of products. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (WarehouseTest, getCurrentCapacityShouldReturnCorrectValue)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that getCurrentCapacity returns the correct current capacity of the warehouse. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (WarehouseTest, getNameShouldReturnCorrectValue)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that getName returns the correct name of a product by its ID. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (WarehouseTest, getPriceShouldReturnCorrectValue)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that getPrice returns the correct price of a product by its ID. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (WarehouseTest, getQuantityShouldReturnCorrectValue)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that getQuantity returns the correct quantity of a product by its ID. }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const QString {\b testLocation} = "Test Location"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const double {\b initialCapacity} = 100.0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const QString {\b productName} = "Test Product"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const double {\b productPrice} = 10.0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const int {\b productQuantity} = 20\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const int {\b productId} = 1\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file of tests for the {\b Warehouse} class. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition in file {\b WarehouseTest.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v TEST\:WarehouseTest.cpp}
{\xe \v WarehouseTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (WarehouseTest , addProductShouldReturnError )}}
\par
{\bkmkstart AAAAAAAADO}
{\bkmkend AAAAAAAADO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that addProduct returns an error when given a negative price or quantity. }}\par
{
Definition at line {\b 171} of file {\b WarehouseTest.cpp}.}\par
}
{\xe \v TEST\:WarehouseTest.cpp}
{\xe \v WarehouseTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (WarehouseTest , addProductShouldReturnSuccess )}}
\par
{\bkmkstart AAAAAAAADP}
{\bkmkend AAAAAAAADP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that addProduct successfully adds a product to the warehouse. }}\par
{
Definition at line {\b 161} of file {\b WarehouseTest.cpp}.}\par
}
{\xe \v TEST\:WarehouseTest.cpp}
{\xe \v WarehouseTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (WarehouseTest , changeQuantityShouldReturnError )}}
\par
{\bkmkstart AAAAAAAADQ}
{\bkmkend AAAAAAAADQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that changeQuantity returns an error when given a negative quantity. }}\par
{
Definition at line {\b 109} of file {\b WarehouseTest.cpp}.}\par
}
{\xe \v TEST\:WarehouseTest.cpp}
{\xe \v WarehouseTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (WarehouseTest , changeQuantityShouldReturnSuccess )}}
\par
{\bkmkstart AAAAAAAADR}
{\bkmkend AAAAAAAADR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that changeQuantity successfully changes the quantity of a product. }}\par
{
Definition at line {\b 98} of file {\b WarehouseTest.cpp}.}\par
}
{\xe \v TEST\:WarehouseTest.cpp}
{\xe \v WarehouseTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (WarehouseTest , checkStatusShouldReturnAvailable )}}
\par
{\bkmkstart AAAAAAAADS}
{\bkmkend AAAAAAAADS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to check if the warehouse status is AVAILABLE when capacity is not full. }}\par
{
Definition at line {\b 50} of file {\b WarehouseTest.cpp}.}\par
}
{\xe \v TEST\:WarehouseTest.cpp}
{\xe \v WarehouseTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (WarehouseTest , checkStatusShouldReturnEmpty )}}
\par
{\bkmkstart AAAAAAAADT}
{\bkmkend AAAAAAAADT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to check if the warehouse status is EMPTY when capacity is zero or after products are removed. }}\par
{
Definition at line {\b 21} of file {\b WarehouseTest.cpp}.}\par
}
{\xe \v TEST\:WarehouseTest.cpp}
{\xe \v WarehouseTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (WarehouseTest , checkStatusShouldReturnFully )}}
\par
{\bkmkstart AAAAAAAADU}
{\bkmkend AAAAAAAADU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to check if the warehouse status is FULLY when capacity is full or exceeded. }}\par
{
Definition at line {\b 35} of file {\b WarehouseTest.cpp}.}\par
}
{\xe \v TEST\:WarehouseTest.cpp}
{\xe \v WarehouseTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (WarehouseTest , getCurrentCapacityShouldReturnCorrectValue )}}
\par
{\bkmkstart AAAAAAAADV}
{\bkmkend AAAAAAAADV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that getCurrentCapacity returns the correct current capacity of the warehouse. }}\par
{
Definition at line {\b 205} of file {\b WarehouseTest.cpp}.}\par
}
{\xe \v TEST\:WarehouseTest.cpp}
{\xe \v WarehouseTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (WarehouseTest , getLocationShouldReturnCorrectValue )}}
\par
{\bkmkstart AAAAAAAADW}
{\bkmkend AAAAAAAADW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that getLocation returns the correct location of the warehouse. }}\par
{
Definition at line {\b 180} of file {\b WarehouseTest.cpp}.}\par
}
{\xe \v TEST\:WarehouseTest.cpp}
{\xe \v WarehouseTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (WarehouseTest , getNameShouldReturnCorrectValue )}}
\par
{\bkmkstart AAAAAAAADX}
{\bkmkend AAAAAAAADX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that getName returns the correct name of a product by its ID. }}\par
{
Definition at line {\b 214} of file {\b WarehouseTest.cpp}.}\par
}
{\xe \v TEST\:WarehouseTest.cpp}
{\xe \v WarehouseTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (WarehouseTest , getPriceShouldReturnCorrectValue )}}
\par
{\bkmkstart AAAAAAAADY}
{\bkmkend AAAAAAAADY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that getPrice returns the correct price of a product by its ID. }}\par
{
Definition at line {\b 224} of file {\b WarehouseTest.cpp}.}\par
}
{\xe \v TEST\:WarehouseTest.cpp}
{\xe \v WarehouseTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (WarehouseTest , getProductListShouldReturnCorrectValue )}}
\par
{\bkmkstart AAAAAAAADZ}
{\bkmkend AAAAAAAADZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that getProductList returns the correct list of products. }}\par
{
Definition at line {\b 189} of file {\b WarehouseTest.cpp}.}\par
}
{\xe \v TEST\:WarehouseTest.cpp}
{\xe \v WarehouseTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (WarehouseTest , getQuantityShouldReturnCorrectValue )}}
\par
{\bkmkstart AAAAAAAAEA}
{\bkmkend AAAAAAAAEA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that getQuantity returns the correct quantity of a product by its ID. }}\par
{
Definition at line {\b 234} of file {\b WarehouseTest.cpp}.}\par
}
{\xe \v TEST\:WarehouseTest.cpp}
{\xe \v WarehouseTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (WarehouseTest , itLives )}}
\par
{\bkmkstart AAAAAAAAEB}
{\bkmkend AAAAAAAAEB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to ensure that a {\b Warehouse} object can be instantiated. }}\par
{
Definition at line {\b 13} of file {\b WarehouseTest.cpp}.}\par
}
{\xe \v TEST\:WarehouseTest.cpp}
{\xe \v WarehouseTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (WarehouseTest , sellShouldReturnError )}}
\par
{\bkmkstart AAAAAAAAEC}
{\bkmkend AAAAAAAAEC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that sell returns an error when trying to sell more than available quantity. }}\par
{
Definition at line {\b 130} of file {\b WarehouseTest.cpp}.}\par
}
{\xe \v TEST\:WarehouseTest.cpp}
{\xe \v WarehouseTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (WarehouseTest , sellShouldReturnSuccess )}}
\par
{\bkmkstart AAAAAAAAED}
{\bkmkend AAAAAAAAED}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that sell successfully sells the product and decreases the quantity. }}\par
{
Definition at line {\b 119} of file {\b WarehouseTest.cpp}.}\par
}
{\xe \v TEST\:WarehouseTest.cpp}
{\xe \v WarehouseTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (WarehouseTest , updatePriceShouldReturnError )}}
\par
{\bkmkstart AAAAAAAAEE}
{\bkmkend AAAAAAAAEE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that updatePrice returns an error when given a negative price. }}\par
{
Definition at line {\b 151} of file {\b WarehouseTest.cpp}.}\par
}
{\xe \v TEST\:WarehouseTest.cpp}
{\xe \v WarehouseTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (WarehouseTest , updatePriceShouldReturnSuccess )}}
\par
{\bkmkstart AAAAAAAAEF}
{\bkmkend AAAAAAAAEF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that updatePrice successfully updates the price of a product. }}\par
{
Definition at line {\b 140} of file {\b WarehouseTest.cpp}.}\par
}
{\xe \v TEST\:WarehouseTest.cpp}
{\xe \v WarehouseTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (WarehouseTest , updateStatusShouldReturnError )}}
\par
{\bkmkstart AAAAAAAAEG}
{\bkmkend AAAAAAAAEG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that updateStatus returns an error when given a negative capacity. }}\par
{
Definition at line {\b 79} of file {\b WarehouseTest.cpp}.}\par
}
{\xe \v TEST\:WarehouseTest.cpp}
{\xe \v WarehouseTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (WarehouseTest , updateStatusShouldReturnSuccess )}}
\par
{\bkmkstart AAAAAAAAEH}
{\bkmkend AAAAAAAAEH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test to verify that updateStatus successfully updates the warehouse's capacity. }}\par
{
Definition at line {\b 65} of file {\b WarehouseTest.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v initialCapacity\:WarehouseTest.cpp}
{\xe \v WarehouseTest.cpp\:initialCapacity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const double initialCapacity = 100.0}}
\par
{\bkmkstart AAAAAAAAEI}
{\bkmkend AAAAAAAAEI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 89} of file {\b WarehouseTest.cpp}.}\par
}
{\xe \v productId\:WarehouseTest.cpp}
{\xe \v WarehouseTest.cpp\:productId}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const int productId = 1}}
\par
{\bkmkstart AAAAAAAAEJ}
{\bkmkend AAAAAAAAEJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 93} of file {\b WarehouseTest.cpp}.}\par
}
{\xe \v productName\:WarehouseTest.cpp}
{\xe \v WarehouseTest.cpp\:productName}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const QString productName = "Test Product"}}
\par
{\bkmkstart AAAAAAAAEK}
{\bkmkend AAAAAAAAEK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 90} of file {\b WarehouseTest.cpp}.}\par
}
{\xe \v productPrice\:WarehouseTest.cpp}
{\xe \v WarehouseTest.cpp\:productPrice}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const double productPrice = 10.0}}
\par
{\bkmkstart AAAAAAAAEL}
{\bkmkend AAAAAAAAEL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 91} of file {\b WarehouseTest.cpp}.}\par
}
{\xe \v productQuantity\:WarehouseTest.cpp}
{\xe \v WarehouseTest.cpp\:productQuantity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const int productQuantity = 20}}
\par
{\bkmkstart AAAAAAAAEM}
{\bkmkend AAAAAAAAEM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 92} of file {\b WarehouseTest.cpp}.}\par
}
{\xe \v testLocation\:WarehouseTest.cpp}
{\xe \v WarehouseTest.cpp\:testLocation}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const QString testLocation = "Test Location"}}
\par
{\bkmkstart AAAAAAAAEN}
{\bkmkend AAAAAAAAEN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 88} of file {\b WarehouseTest.cpp}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
WarehouseTest.cpp\par \pard\plain 
{\tc\tcl2 \v test/Warehouse/WarehouseTest.cpp}
{\xe \v test/Warehouse/WarehouseTest.cpp}
{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00006 {\cf21 #include <gtest/gtest.h>}\par
00007 {\cf21 #include "Product/Product.h"}\par
00008 {\cf21 #include "Warehouse/Warehouse.h"}\par
00009 \par
00013 TEST(WarehouseTest, itLives)\par
00014 \{\par
00015     Warehouse warehouse = Warehouse(QString::fromStdString({\cf22 "Lorem Ipsum"}), 532);\par
00016 \}\par
00017 \par
00021 TEST(WarehouseTest, checkStatusShouldReturnEmpty)\par
00022 \{\par
00023     Warehouse warehouse = Warehouse(QString::fromStdString({\cf22 "Lorem Ipsum"}), 0);\par
00024     EXPECT_EQ(warehouse.checkStatus(), EMPTY);\par
00025 \par
00026     warehouse.updateStatus(10);\par
00027     warehouse.addProduct(QString::fromStdString({\cf22 "Lorem Ipsum"}), 99.99, 10, 1);\par
00028     warehouse.changeQuantity(0, 1);\par
00029     EXPECT_EQ(warehouse.checkStatus(), EMPTY);\par
00030 \}\par
00031 \par
00035 TEST(WarehouseTest, checkStatusShouldReturnFully)\par
00036 \{\par
00037     Warehouse warehouse = Warehouse(QString::fromStdString({\cf22 "Lorem Ipsum"}), 1);\par
00038     warehouse.addProduct(QString::fromStdString({\cf22 "Lorem Ipsum"}), 100, 1, 1);\par
00039     EXPECT_EQ(warehouse.checkStatus(), FULLY);\par
00040 \par
00041     warehouse.updateStatus(10);\par
00042     warehouse.addProduct(QString::fromStdString({\cf22 "Lorem Ipsum"}), 100, 9, 2);\par
00043     warehouse.changeQuantity(2, 1);\par
00044     EXPECT_EQ(warehouse.checkStatus(), FULLY);\par
00045 \}\par
00046 \par
00050 TEST(WarehouseTest, checkStatusShouldReturnAvailable)\par
00051 \{\par
00052     Warehouse warehouse = Warehouse(QString::fromStdString({\cf22 "Lorem Ipsum"}), 2);\par
00053     warehouse.addProduct(QString::fromStdString({\cf22 "Lorem Ipsum"}), 99.99, 1, 0);\par
00054     EXPECT_EQ(warehouse.checkStatus(), AVAILABLE);\par
00055 \par
00056     warehouse.updateStatus(10);\par
00057     warehouse.addProduct(QString::fromStdString({\cf22 "Lorem Ipsum"}), 99.99, 8, 1);\par
00058     warehouse.changeQuantity(2, 1);\par
00059     EXPECT_EQ(warehouse.checkStatus(), AVAILABLE);\par
00060 \}\par
00061 \par
00065 TEST(WarehouseTest, updateStatusShouldReturnSuccess)\par
00066 \{\par
00067     Warehouse warehouse = Warehouse(QString::fromStdString({\cf22 "Lorem Ipsum"}), 0);\par
00068     EXPECT_EQ(warehouse.updateStatus(10), SUCCESS);\par
00069     EXPECT_EQ(warehouse.updateStatus(0), SUCCESS);\par
00070     EXPECT_EQ(warehouse.updateStatus(567.97), SUCCESS);\par
00071 \par
00072     warehouse.addProduct(QString::fromStdString({\cf22 "Lorem Ipsum"}), 99.99, 5, 1);\par
00073     EXPECT_EQ(warehouse.updateStatus(1), ERROR);\par
00074 \}\par
00075 \par
00079 TEST(WarehouseTest, updateStatusShouldReturnError)\par
00080 \{\par
00081     Warehouse warehouse = Warehouse(QString::fromStdString({\cf22 "Lorem Ipsum"}), 567);\par
00082     EXPECT_EQ(warehouse.updateStatus(-1), ERROR);\par
00083 \par
00084     warehouse.addProduct(QString::fromStdString({\cf22 "Lorem Ipsum"}), 100, 5, 1);\par
00085     EXPECT_EQ(warehouse.updateStatus(1), ERROR);\par
00086 \}\par
00087 \par
00088 {\cf17 const} QString testLocation = {\cf22 "Test Location"};\par
00089 {\cf17 const} {\cf18 double} initialCapacity = 100.0;\par
00090 {\cf17 const} QString productName = {\cf22 "Test Product"};\par
00091 {\cf17 const} {\cf18 double} productPrice = 10.0;\par
00092 {\cf17 const} {\cf18 int} productQuantity = 20;\par
00093 {\cf17 const} {\cf18 int} productId = 1;\par
00094 \par
00098 TEST(WarehouseTest, changeQuantityShouldReturnSuccess)\par
00099 \{\par
00100     Warehouse warehouse(testLocation, initialCapacity);\par
00101     warehouse.addProduct(productName, productPrice, productQuantity, productId);\par
00102     EXPECT_EQ(warehouse.changeQuantity(30, productId), SUCCESS);\par
00103     EXPECT_EQ(warehouse.getQuantity(productId), 30);\par
00104 \}\par
00105 \par
00109 TEST(WarehouseTest, changeQuantityShouldReturnError)\par
00110 \{\par
00111     Warehouse warehouse(testLocation, initialCapacity);\par
00112     warehouse.addProduct(productName, productPrice, productQuantity, productId);\par
00113     EXPECT_EQ(warehouse.changeQuantity(-5, productId), ERROR);\par
00114 \}\par
00115 \par
00119 TEST(WarehouseTest, sellShouldReturnSuccess)\par
00120 \{\par
00121     Warehouse warehouse(testLocation, initialCapacity);\par
00122     warehouse.addProduct(productName, productPrice, productQuantity, productId);\par
00123     EXPECT_EQ(warehouse.sell(5, productId), SUCCESS);\par
00124     EXPECT_EQ(warehouse.getQuantity(productId), productQuantity - 5);\par
00125 \}\par
00126 \par
00130 TEST(WarehouseTest, sellShouldReturnError)\par
00131 \{\par
00132     Warehouse warehouse(testLocation, initialCapacity);\par
00133     warehouse.addProduct(productName, productPrice, productQuantity, productId);\par
00134     EXPECT_EQ(warehouse.sell(productQuantity + 1, productId), ERROR);\par
00135 \}\par
00136 \par
00140 TEST(WarehouseTest, updatePriceShouldReturnSuccess)\par
00141 \{\par
00142     Warehouse warehouse(testLocation, initialCapacity);\par
00143     warehouse.addProduct(productName, productPrice, productQuantity, productId);\par
00144     EXPECT_EQ(warehouse.updatePrice(15.0, productId), SUCCESS);\par
00145     EXPECT_EQ(warehouse.getPrice(productId), 15.0);\par
00146 \}\par
00147 \par
00151 TEST(WarehouseTest, updatePriceShouldReturnError)\par
00152 \{\par
00153     Warehouse warehouse(testLocation, initialCapacity);\par
00154     warehouse.addProduct(productName, productPrice, productQuantity, productId);\par
00155     EXPECT_EQ(warehouse.updatePrice(-1.0, productId), ERROR);\par
00156 \}\par
00157 \par
00161 TEST(WarehouseTest, addProductShouldReturnSuccess)\par
00162 \{\par
00163     Warehouse warehouse(testLocation, initialCapacity);\par
00164     EXPECT_EQ(warehouse.addProduct(productName, productPrice, productQuantity, productId), SUCCESS);\par
00165     EXPECT_EQ(warehouse.getProductList().size(), 1);\par
00166 \}\par
00167 \par
00171 TEST(WarehouseTest, addProductShouldReturnError)\par
00172 \{\par
00173     Warehouse warehouse(testLocation, initialCapacity);\par
00174     EXPECT_EQ(warehouse.addProduct(productName, -productPrice, productQuantity, productId), ERROR);\par
00175 \}\par
00176 \par
00180 TEST(WarehouseTest, getLocationShouldReturnCorrectValue)\par
00181 \{\par
00182     Warehouse warehouse(testLocation, initialCapacity);\par
00183     EXPECT_EQ(warehouse.getLocation(), testLocation);\par
00184 \}\par
00185 \par
00189 TEST(WarehouseTest, getProductListShouldReturnCorrectValue)\par
00190 \{\par
00191     Warehouse warehouse(testLocation, initialCapacity);\par
00192     warehouse.addProduct(productName, productPrice, productQuantity, productId);\par
00193 \par
00194     QList<Product> productList = warehouse.getProductList();\par
00195 \par
00196     ASSERT_EQ(productList.size(), 1);\par
00197     EXPECT_EQ(productList[0].getName(), productName);\par
00198     EXPECT_EQ(productList[0].getPrice(), productPrice);\par
00199     EXPECT_EQ(productList[0].getQuantity(), productQuantity);\par
00200 \}\par
00201 \par
00205 TEST(WarehouseTest, getCurrentCapacityShouldReturnCorrectValue)\par
00206 \{\par
00207     Warehouse warehouse(testLocation, initialCapacity);\par
00208     EXPECT_EQ(warehouse.getCurrentCapacity(), initialCapacity);\par
00209 \}\par
00210 \par
00214 TEST(WarehouseTest, getNameShouldReturnCorrectValue)\par
00215 \{\par
00216     Warehouse warehouse(testLocation, initialCapacity);\par
00217     warehouse.addProduct(productName, productPrice, productQuantity, productId);\par
00218     EXPECT_EQ(warehouse.getName(productId), productName);\par
00219 \}\par
00220 \par
00224 TEST(WarehouseTest, getPriceShouldReturnCorrectValue)\par
00225 \{\par
00226     Warehouse warehouse(testLocation, initialCapacity);\par
00227     warehouse.addProduct(productName, productPrice, productQuantity, productId);\par
00228     EXPECT_EQ(warehouse.getPrice(productId), productPrice);\par
00229 \}\par
00230 \par
00234 TEST(WarehouseTest, getQuantityShouldReturnCorrectValue)\par
00235 \{\par
00236     Warehouse warehouse(testLocation, initialCapacity);\par
00237     warehouse.addProduct(productName, productPrice, productQuantity, productId);\par
00238     EXPECT_EQ(warehouse.getQuantity(productId), productQuantity);\par
00239 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test/WarehouseReport/WarehouseReportTest.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v test/WarehouseReport/WarehouseReportTest.cpp}
{\xe \v test/WarehouseReport/WarehouseReportTest.cpp}
{\bkmkstart AAAAAAAAEO}
{\bkmkend AAAAAAAAEO}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file of tests for the {\b WarehouseReport} class. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <gtest/gtest.h>}\par
{\f2 #include "WarehouseReport/WarehouseReport.h"}\par
{\f2 #include <QDateTime>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (WarehouseReportTest, itLives)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test case to ensure that a {\b WarehouseReport} object can be instantiated. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST} (WarehouseReportTest, generateReportShouldReturnCorrectValue)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test case to verify that the {\b WarehouseReport::generateReport} method returns the correct CSV format. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Source file of tests for the {\b WarehouseReport} class. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{
Definition in file {\b WarehouseReportTest.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v TEST\:WarehouseReportTest.cpp}
{\xe \v WarehouseReportTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (WarehouseReportTest , generateReportShouldReturnCorrectValue )}}
\par
{\bkmkstart AAAAAAAAEP}
{\bkmkend AAAAAAAAEP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test case to verify that the {\b WarehouseReport::generateReport} method returns the correct CSV format. }}\par
{
Definition at line {\b 27} of file {\b WarehouseReportTest.cpp}.}\par
}
{\xe \v TEST\:WarehouseReportTest.cpp}
{\xe \v WarehouseReportTest.cpp\:TEST}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST (WarehouseReportTest , itLives )}}
\par
{\bkmkstart AAAAAAAAEQ}
{\bkmkend AAAAAAAAEQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test case to ensure that a {\b WarehouseReport} object can be instantiated. }}\par
{
Definition at line {\b 13} of file {\b WarehouseReportTest.cpp}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
WarehouseReportTest.cpp\par \pard\plain 
{\tc\tcl2 \v test/WarehouseReport/WarehouseReportTest.cpp}
{\xe \v test/WarehouseReport/WarehouseReportTest.cpp}
{\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00006 {\cf21 #include <gtest/gtest.h>}\par
00007 {\cf21 #include "WarehouseReport/WarehouseReport.h"}\par
00008 {\cf21 #include <QDateTime>}\par
00009 \par
00013 TEST(WarehouseReportTest, itLives)\par
00014 \{\par
00015     {\cf18 int} warehouseId = 1;\par
00016     {\cf18 double} capacity = 1000.0;\par
00017     QList<Report::ProductReport> productList;\par
00018     {\cf18 double} operationalCosts = 2000.0;\par
00019     {\cf18 double} netProfit = 5000.0;\par
00020 \par
00021     WarehouseReport report(warehouseId, capacity, productList, operationalCosts, netProfit);\par
00022 \}\par
00023 \par
00027 TEST(WarehouseReportTest, generateReportShouldReturnCorrectValue)\par
00028 \{\par
00029     {\cf18 int} warehouseId = 1;\par
00030     {\cf18 double} capacity = 1000.0;\par
00031     QList<Report::ProductReport> productList =\par
00032         \{\par
00033             \{{\cf22 "Product1"}, 10.0, 5\},\par
00034             \{{\cf22 "Product2"}, 20.0, 3\}\par
00035         \};\par
00036 \par
00037     {\cf18 double} operationalCosts = 2000.0;\par
00038     {\cf18 double} netProfit = 5000.0;\par
00039 \par
00040     WarehouseReport report(warehouseId, capacity, productList, operationalCosts, netProfit);\par
00041     QString generatedCSV = report.generateReport();\par
00042 \par
00043     QString expectedCSVStart = QString({\cf22 "Warehouse ID,Capacity\\n%1,%2\\nProduct Name,Price,Quantity\\n"}).arg(warehouseId).arg(capacity);\par
00044     ASSERT_TRUE(generatedCSV.startsWith(expectedCSVStart));\par
00045 \}\par
00046 \par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Index\par 
\pard\plain 
{\tc \v Index}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}
